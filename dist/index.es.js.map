{"version":3,"file":"index.es.js","sources":["../src/utils.ts","../src/constants.ts","../src/BaseTronPayments.ts","../src/Bip44Cache.ts","../src/base58.ts","../src/bip44.ts","../src/HdTronPayments.ts","../src/KeyPairTronPayments.ts","../src/types.ts","../src/TronPaymentsFactory.ts"],"sourcesContent":["/** Converts strings to Error */\nexport function toError(e: any): any {\n  if (typeof e === 'string') {\n    return new Error(e)\n  }\n  return e\n}\n\nexport function toMainDenominationNumber(amountSun: number | string): number {\n  const baseUnits = typeof amountSun === 'number' ? amountSun : Number.parseInt(amountSun)\n  if (Number.isNaN(baseUnits)) {\n    throw new Error('Cannot convert to main denomination - not a number')\n  }\n  if (!Number.isFinite(baseUnits)) {\n    throw new Error('Cannot convert to main denomination - not finite')\n  }\n  return baseUnits / 1e6\n}\n\nexport function toMainDenomination(amountSun: number | string): string {\n  return toMainDenominationNumber(amountSun).toString()\n}\n\nexport function toBaseDenominationNumber(amountTrx: number | string): number {\n  const mainUnits = typeof amountTrx === 'number' ? amountTrx : Number.parseFloat(amountTrx)\n  if (Number.isNaN(mainUnits)) {\n    throw new Error('Cannot convert to base denomination - not a number')\n  }\n  if (!Number.isFinite(mainUnits)) {\n    throw new Error('Cannot convert to base denomination - not finite')\n  }\n  return Math.floor(mainUnits * 1e6)\n}\n\nexport function toBaseDenomination(amountTrx: number | string): string {\n  return toBaseDenominationNumber(amountTrx).toString()\n}\n\nexport function isValidXprv(xprv: string): boolean {\n  return xprv.startsWith('xprv')\n}\n\nexport function isValidXpub(xpub: string): boolean {\n  return xpub.startsWith('xpub')\n}\n","import { FeeLevel } from '@faast/payments-common'\n\nexport const MIN_BALANCE_SUN = 100000\nexport const MIN_BALANCE_TRX = MIN_BALANCE_SUN / 1e6\n\nexport const DEFAULT_FULL_NODE = process.env.TRX_FULL_NODE_URL || 'http://54.236.37.243:8090'\nexport const DEFAULT_SOLIDITY_NODE = process.env.TRX_SOLIDITY_NODE_URL || 'http://47.89.187.247:8091'\nexport const DEFAULT_EVENT_SERVER = process.env.TRX_EVENT_SERVER_URL || 'https://api.trongrid.io'\nexport const DEFAULT_MAX_ADDRESS_SCAN = 10\n","import TronWeb, { Transaction as TronTransaction } from 'tronweb'\nimport { pick, get, cloneDeep } from 'lodash'\nimport {\n  BalanceResult,\n  PaymentsInterface,\n  TransactionStatus,\n  FeeLevel,\n  FeeOption,\n  FeeRateType,\n  FeeOptionCustom,\n  ResolvedFeeOption,\n} from '@faast/payments-common'\nimport { isType } from '@faast/ts-common'\n\nimport {\n  TronTransactionInfo,\n  TronUnsignedTransaction,\n  TronSignedTransaction,\n  TronBroadcastResult,\n  CreateTransactionOptions,\n  GetAddressOptions,\n  BaseTronPaymentsConfig,\n  TronWebTransaction,\n} from './types'\nimport { toMainDenomination, toBaseDenomination, toBaseDenominationNumber, toError } from './utils'\nimport {\n  DEFAULT_FULL_NODE,\n  DEFAULT_EVENT_SERVER,\n  DEFAULT_SOLIDITY_NODE,\n  MIN_BALANCE_SUN,\n  MIN_BALANCE_TRX,\n} from './constants'\n\nexport abstract class BaseTronPayments<Config extends BaseTronPaymentsConfig>\n  implements\n    PaymentsInterface<\n      Config,\n      TronUnsignedTransaction,\n      TronSignedTransaction,\n      TronBroadcastResult,\n      TronTransactionInfo\n    > {\n  // You may notice that many function blocks are enclosed in a try/catch.\n  // I had to do this because tronweb thinks it's a good idea to throw\n  // strings instead of Errors and now we need to convert them all ourselves\n  // to be consistent.\n\n  fullNode: string\n  solidityNode: string\n  eventServer: string\n  tronweb: TronWeb\n\n  constructor(config: Config) {\n    this.fullNode = config.fullNode || DEFAULT_FULL_NODE\n    this.solidityNode = config.solidityNode || DEFAULT_SOLIDITY_NODE\n    this.eventServer = config.eventServer || DEFAULT_EVENT_SERVER\n\n    this.tronweb = new TronWeb(this.fullNode, this.solidityNode, this.eventServer)\n  }\n\n  static toMainDenomination = toMainDenomination\n  static toBaseDenomination = toBaseDenomination\n  toMainDenomination = toMainDenomination\n  toBaseDenomination = toBaseDenomination\n\n  isValidAddress(address: string): boolean {\n    return this.tronweb.isAddress(address)\n  }\n\n  isValidPrivateKey(privateKey: string): boolean {\n    try {\n      this.privateKeyToAddress(privateKey)\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n\n  privateKeyToAddress(privateKey: string): string {\n    const address = this.tronweb.address.fromPrivateKey(privateKey)\n    if (this.isValidAddress(address)) {\n      return address\n    } else {\n      throw new Error('Validation failed for address derived from private key')\n    }\n  }\n\n  abstract getFullConfig(): Config\n  abstract getPublicConfig(): Config\n  abstract getAccountId(index: number): string\n  abstract getAccountIds(): string[]\n  abstract async getAddress(index: number, options?: GetAddressOptions): Promise<string>\n  abstract async getAddressIndex(address: string): Promise<number>\n  abstract async getPrivateKey(index: number): Promise<string>\n\n  async getAddressOrNull(index: number, options?: GetAddressOptions): Promise<string | null> {\n    try {\n      return await this.getAddress(index, options)\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getAddressIndexOrNull(address: string): Promise<number | null> {\n    try {\n      return await this.getAddressIndex(address)\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getBalance(addressOrIndex: string | number): Promise<BalanceResult> {\n    try {\n      const address = await this.resolveAddress(addressOrIndex)\n      const balanceSun = await this.tronweb.trx.getBalance(address)\n      return {\n        confirmedBalance: toMainDenomination(balanceSun).toString(),\n        unconfirmedBalance: '0',\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async canSweep(addressOrIndex: string | number): Promise<boolean> {\n    const { confirmedBalance } = await this.getBalance(addressOrIndex)\n    return this.canSweepBalance(toBaseDenominationNumber(confirmedBalance))\n  }\n\n  async resolveFeeOption(feeOption: FeeOption): Promise<ResolvedFeeOption> {\n    let targetFeeLevel: FeeLevel\n    if (isType(FeeOptionCustom, feeOption)) {\n      if (feeOption.feeRate !== '0') {\n        throw new Error('tron-payments custom fees are unsupported')\n      }\n      targetFeeLevel = FeeLevel.Custom\n    } else {\n      targetFeeLevel = feeOption.feeLevel\n    }\n    return {\n      targetFeeLevel,\n      targetFeeRate: '0',\n      targetFeeRateType: FeeRateType.Base,\n      feeBase: '0',\n      feeMain: '0',\n    }\n  }\n\n  async createSweepTransaction(\n    from: string | number,\n    to: string | number,\n    options: CreateTransactionOptions = { feeLevel: FeeLevel.Medium },\n  ): Promise<TronUnsignedTransaction> {\n    try {\n      const { fromAddress, fromIndex, toAddress, toIndex } = await this.resolveFromTo(from, to)\n      const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeBase, feeMain } = await this.resolveFeeOption(\n        options,\n      )\n      const feeSun = Number.parseInt(feeBase)\n      const balanceSun = await this.tronweb.trx.getBalance(fromAddress)\n      const balanceTrx = toMainDenomination(balanceSun)\n      if (!this.canSweepBalance(balanceSun)) {\n        throw new Error(\n          `Insufficient balance (${balanceTrx}) to sweep with fee of ${feeMain} ` +\n            `while maintaining a minimum required balance of ${MIN_BALANCE_TRX}`,\n        )\n      }\n      const amountSun = balanceSun - feeSun - MIN_BALANCE_SUN\n      const amountTrx = toMainDenomination(amountSun)\n      const tx = await this.tronweb.transactionBuilder.sendTrx(toAddress, amountSun, fromAddress)\n      return {\n        id: tx.txID,\n        fromAddress,\n        toAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        amount: amountTrx,\n        fee: feeMain,\n        targetFeeLevel,\n        targetFeeRate,\n        targetFeeRateType,\n        status: 'unsigned',\n        data: tx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async createTransaction(\n    from: string | number,\n    to: string | number,\n    amountTrx: string,\n    options: CreateTransactionOptions = { feeLevel: FeeLevel.Medium },\n  ): Promise<TronUnsignedTransaction> {\n    try {\n      const { fromAddress, fromIndex, toAddress, toIndex } = await this.resolveFromTo(from, to)\n      const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeBase, feeMain } = await this.resolveFeeOption(\n        options,\n      )\n      const feeSun = Number.parseInt(feeBase)\n      const balanceSun = await this.tronweb.trx.getBalance(fromAddress)\n      const balanceTrx = toMainDenomination(balanceSun)\n      const amountSun = toBaseDenominationNumber(amountTrx)\n      if (balanceSun - feeSun - MIN_BALANCE_SUN < amountSun) {\n        throw new Error(\n          `Insufficient balance (${balanceTrx}) to send ${amountTrx} including fee of ${feeMain} ` +\n            `while maintaining a minimum required balance of ${MIN_BALANCE_TRX}`,\n        )\n      }\n      const tx = await this.tronweb.transactionBuilder.sendTrx(toAddress, amountSun, fromAddress)\n      return {\n        id: tx.txID,\n        fromAddress,\n        toAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        amount: amountTrx,\n        fee: feeMain,\n        targetFeeLevel,\n        targetFeeRate,\n        targetFeeRateType,\n        status: 'unsigned',\n        data: tx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async signTransaction(unsignedTx: TronUnsignedTransaction): Promise<TronSignedTransaction> {\n    try {\n      const fromPrivateKey = await this.getPrivateKey(unsignedTx.fromIndex)\n      const unsignedRaw = cloneDeep(unsignedTx.data) as TronWebTransaction // tron modifies unsigned object\n      const signedTx = await this.tronweb.trx.sign(unsignedRaw, fromPrivateKey)\n      return {\n        ...unsignedTx,\n        status: 'signed',\n        data: signedTx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async broadcastTransaction(tx: TronSignedTransaction): Promise<TronBroadcastResult> {\n    /*\n     * I’ve discovered that tron nodes like to “remember” every transaction you give it.\n     * If you try broadcasting an invalid TX the first time you’ll get a `SIGERROR` but\n     * every subsequent broadcast gives a `DUP_TRANSACTION_ERROR`. Which is the exact same\n     * error you get after rebroadcasting a valid transaction. And to make things worse,\n     * if you try to look up the invalid transaction by ID it tells you `Transaction not found`.\n     * So in order to actually determine the status of a broadcast the logic becomes:\n     * `success status` -> broadcast succeeded\n     * `error status` -> broadcast failed\n     * `(DUP_TRANSACTION_ERROR && Transaction found)` -> tx already broadcast\n     * `(DUP_TRANASCTION_ERROR && Transaction not found)` -> tx was probably invalid? Maybe? Who knows…\n     */\n    try {\n      const status = await this.tronweb.trx.sendRawTransaction(tx.data as TronWebTransaction)\n      let success = false\n      let rebroadcast = false\n      if (status.result || status.code === 'SUCCESS') {\n        success = true\n      } else {\n        try {\n          await this.tronweb.trx.getTransaction(tx.id)\n          success = true\n          rebroadcast = true\n        } catch (e) {}\n      }\n      if (success) {\n        return {\n          id: tx.id,\n          rebroadcast,\n        }\n      } else {\n        let statusCode: string | undefined = status.code\n        if (status.code === 'DUP_TRANSACTION_ERROR') {\n          statusCode = 'DUP_TX_BUT_TX_NOT_FOUND_SO_PROBABLY_INVALID_TX_ERROR'\n        }\n        throw new Error(`Failed to broadcast transaction: ${status.code}`)\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async getTransactionInfo(txid: string): Promise<TronTransactionInfo> {\n    try {\n      const [tx, txInfo, currentBlock] = await Promise.all([\n        this.tronweb.trx.getTransaction(txid),\n        this.tronweb.trx.getTransactionInfo(txid),\n        this.tronweb.trx.getCurrentBlock(),\n      ])\n\n      const { amountTrx, fromAddress, toAddress } = this.extractTxFields(tx)\n\n      const [fromIndex, toIndex] = await Promise.all([\n        this.getAddressIndexOrNull(fromAddress),\n        this.getAddressIndexOrNull(toAddress),\n      ])\n\n      const contractRet = get(tx, 'ret[0].contractRet')\n      const isExecuted = contractRet === 'SUCCESS'\n\n      const block = txInfo.blockNumber || null\n      const feeTrx = toMainDenomination(txInfo.fee || 0)\n\n      const currentBlockNumber = get(currentBlock, 'block_header.raw_data.number', 0)\n      const confirmations = currentBlockNumber && block ? currentBlockNumber - block : 0\n      const isConfirmed = confirmations > 0\n\n      const confirmationTimestamp = txInfo.blockTimeStamp ? new Date(txInfo.blockTimeStamp) : null\n\n      let status: TransactionStatus = TransactionStatus.Pending\n      if (isConfirmed) {\n        if (!isExecuted) {\n          status = TransactionStatus.Failed\n        }\n        status = TransactionStatus.Confirmed\n      }\n\n      return {\n        id: tx.txID,\n        amount: amountTrx,\n        toAddress,\n        fromAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        fee: feeTrx,\n        isExecuted,\n        isConfirmed,\n        confirmations,\n        confirmationId: block ? String(block) : null,\n        confirmationTimestamp,\n        status,\n        data: {\n          ...tx,\n          ...txInfo,\n          currentBlock: pick(currentBlock, 'block_header', 'blockID'),\n        },\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  // HELPERS\n\n  private canSweepBalance(balanceSun: number): boolean {\n    return balanceSun - MIN_BALANCE_SUN > 0\n  }\n\n  private extractTxFields(tx: TronTransaction) {\n    const contractParam = get(tx, 'raw_data.contract[0].parameter.value')\n    if (!(contractParam && typeof contractParam.amount === 'number')) {\n      throw new Error('Unable to get transaction')\n    }\n\n    const amountSun = contractParam.amount || 0\n    const amountTrx = toMainDenomination(amountSun)\n    const toAddress = this.tronweb.address.fromHex(contractParam.to_address)\n    const fromAddress = this.tronweb.address.fromHex(contractParam.owner_address)\n    return {\n      amountTrx,\n      amountSun,\n      toAddress,\n      fromAddress,\n    }\n  }\n\n  async resolveAddress(addressOrIndex: string | number): Promise<string> {\n    if (typeof addressOrIndex === 'number') {\n      return this.getAddress(addressOrIndex)\n    } else {\n      if (!this.isValidAddress(addressOrIndex)) {\n        throw new Error(`Invalid TRON address: ${addressOrIndex}`)\n      }\n      return addressOrIndex\n    }\n  }\n\n  async resolveFromTo(\n    from: string | number,\n    to: string | number,\n  ): Promise<{\n    fromIndex: number\n    fromAddress: string\n    toIndex: number | null\n    toAddress: string\n  }> {\n    const fromIndex = typeof from === 'string' ? await this.getAddressIndex(from) : from\n    return {\n      fromAddress: await this.resolveAddress(from),\n      fromIndex,\n      toAddress: await this.resolveAddress(to),\n      toIndex: typeof to === 'string' ? await this.getAddressIndexOrNull(to) : to,\n    }\n  }\n}\n\nexport default BaseTronPayments\n","import { set, get } from 'lodash'\n\n/**\n * Caches all addresses and indices derived from xpubs. Keeping this a module level variable allows\n * multiple instances of TronPayments using the same xpub to share cached values. We could use a\n * real lru cache here but even if we cached 1,000,000 addresses we'd only use ~150 MB of memory.\n *\n * 2 entries * (34 chars in address * 2 bytes per char + 8 bytes per number) = 152 bytes per address\n * 1000000 addresses * 152 bytes = 152 MB\n */\nexport class Bip44Cache {\n  store: {\n    [xpub: string]: {\n      addresses: { [index: number]: string }\n      indices: { [address: string]: number }\n    }\n  } = {}\n\n  put(xpub: string, index: number, address: string): void {\n    set(this.store, [xpub, 'addresses', index], address)\n    set(this.store, [xpub, 'indices', address], index)\n  }\n\n  lookupIndex(xpub: string, address: string): number | undefined {\n    return get(this.store, [xpub, 'indices', address])\n  }\n\n  lookupAddress(xpub: string, index: number): string | undefined {\n    return get(this.store, [xpub, 'addresses', index])\n  }\n}\n\nexport default Bip44Cache\n","// Borrowed from tronWeb\n// https://github.com/tronprotocol/tron-web/blob/master/src/utils/base58.js\n\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\nconst ALPHABET_MAP: { [c: string]: number } = {}\n\nfor (let i = 0; i < ALPHABET.length; i++) {\n  ALPHABET_MAP[ALPHABET.charAt(i)] = i\n}\n\nconst BASE = 58\n\nexport function encode58(buffer: Buffer | number[]) {\n  if (buffer.length === 0) {\n    return ''\n  }\n\n  let i\n  let j\n\n  const digits = [0]\n\n  for (i = 0; i < buffer.length; i++) {\n    for (j = 0; j < digits.length; j++) {\n      digits[j] <<= 8\n    }\n\n    digits[0] += buffer[i]\n    let carry = 0\n\n    for (j = 0; j < digits.length; ++j) {\n      digits[j] += carry\n      carry = (digits[j] / BASE) | 0\n      digits[j] %= BASE\n    }\n\n    while (carry) {\n      digits.push(carry % BASE)\n      carry = (carry / BASE) | 0\n    }\n  }\n\n  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {\n    digits.push(0)\n  }\n\n  return digits\n    .reverse()\n    .map(digit => ALPHABET[digit])\n    .join('')\n}\n\nexport function decode58(s: string): number[] {\n  if (s.length === 0) {\n    return []\n  }\n\n  let i\n  let j\n\n  const bytes = [0]\n\n  for (i = 0; i < s.length; i++) {\n    const c = s[i]\n\n    if (!(c in ALPHABET_MAP)) {\n      throw new Error('Non-base58 character')\n    }\n\n    for (j = 0; j < bytes.length; j++) {\n      bytes[j] *= BASE\n    }\n\n    bytes[0] += ALPHABET_MAP[c]\n    let carry = 0\n\n    for (j = 0; j < bytes.length; ++j) {\n      bytes[j] += carry\n      carry = bytes[j] >> 8\n      bytes[j] &= 0xff\n    }\n\n    while (carry) {\n      bytes.push(carry & 0xff)\n      carry >>= 8\n    }\n  }\n\n  for (i = 0; s[i] === '1' && i < s.length - 1; i++) {\n    bytes.push(0)\n  }\n\n  return bytes.reverse()\n}\n","// Many parts of this code are snippets from tronWeb:\n// https://github.com/tronprotocol/tron-web/blob/master/src/index.js\n\nimport { HDPrivateKey, HDPublicKey } from 'bitcore-lib'\nimport { keccak256 } from 'js-sha3'\nimport jsSHA from 'jssha'\nimport { ec as EC } from 'elliptic'\n\nimport { encode58 } from './base58'\n\nconst ec = new EC('secp256k1')\n\nexport const derivationPath = \"m/44'/195'/0\"\nconst derivationPathParts = derivationPath.split('/').slice(1)\n\ntype HDKey<K> = {\n  depth: number\n  derive: (path: string | number, hardened?: boolean) => K\n}\n\nexport function deriveAddress(xpub: string, index: number): string {\n  const key = new HDPublicKey(xpub)\n  const derived = deriveBasePath(key).derive(index)\n  return hdPublicKeyToAddress(derived)\n}\n\nexport function derivePrivateKey(xprv: string, index: number): string {\n  const key = new HDPrivateKey(xprv)\n  const derived = deriveBasePath(key).derive(index)\n  return hdPrivateKeyToPrivateKey(derived)\n}\n\nexport function xprvToXpub(xprv: string | HDPrivateKey): string {\n  const key = xprv instanceof HDPrivateKey ? xprv : new HDPrivateKey(xprv)\n  const derivedPubKey = deriveBasePath(key).hdPublicKey\n  return derivedPubKey.toString()\n}\n\n// HELPER FUNCTIONS\n\nfunction deriveBasePath<K extends HDKey<K>>(key: K): K {\n  const parts = derivationPathParts.slice(key.depth)\n  if (parts.length > 0) {\n    return key.derive(`m/${parts.join('/')}`)\n  }\n  return key\n}\n\nfunction hdPublicKeyToAddress(key: HDPublicKey): string {\n  return addressBytesToB58CheckAddress(pubBytesToTronBytes(bip32PublicToTronPublic(key.publicKey.toBuffer())))\n}\n\nfunction hdPrivateKeyToPrivateKey(key: HDPrivateKey): string {\n  return bip32PrivateToTronPrivate(key.privateKey.toBuffer())\n}\n\nfunction bip32PublicToTronPublic(pubKey: any): number[] {\n  const pubkey = ec.keyFromPublic(pubKey).getPublic()\n  const x = pubkey.x\n  const y = pubkey.y\n\n  let xHex = x.toString('hex')\n\n  while (xHex.length < 64) {\n    xHex = `0${xHex}`\n  }\n\n  let yHex = y.toString('hex')\n\n  while (yHex.length < 64) {\n    yHex = `0${yHex}`\n  }\n\n  const pubkeyHex = `04${xHex}${yHex}`\n  const pubkeyBytes = hexStr2byteArray(pubkeyHex)\n\n  return pubkeyBytes\n}\n\nfunction bip32PrivateToTronPrivate(priKeyBytes: Buffer): string {\n  const key = ec.keyFromPrivate(priKeyBytes, 'bytes')\n  const privkey = key.getPrivate() as Buffer\n  let priKeyHex = privkey.toString('hex')\n  while (priKeyHex.length < 64) {\n    priKeyHex = `0${priKeyHex}`\n  }\n  let privArray = hexStr2byteArray(priKeyHex)\n  return byteArray2hexStr(privArray)\n}\n\n// Borrowed from tronweb:  https://github.com/tronprotocol/tron-web/blob/master/src/utils/code.js\nconst ADDRESS_PREFIX = '41'\nfunction byte2hexStr(byte: number): string {\n  const hexByteMap = '0123456789ABCDEF'\n\n  let str = ''\n  str += hexByteMap.charAt(byte >> 4)\n  str += hexByteMap.charAt(byte & 0x0f)\n\n  return str\n}\n\nfunction hexStr2byteArray(str: string): number[] {\n  const byteArray = Array()\n  let d = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i)\n\n    if (isHexChar(c)) {\n      d <<= 4\n      d += hexChar2byte(c)\n      j++\n\n      if (0 === j % 2) {\n        byteArray[k++] = d\n        d = 0\n      }\n    }\n  }\n\n  return byteArray\n}\n\nfunction isHexChar(c: string): boolean {\n  return (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f') || (c >= '0' && c <= '9')\n}\n\nfunction hexChar2byte(c: string): number {\n  let d = 0\n\n  if (c >= 'A' && c <= 'F') {\n    d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10\n  } else if (c >= 'a' && c <= 'f') {\n    d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10\n  } else if (c >= '0' && c <= '9') {\n    d = c.charCodeAt(0) - '0'.charCodeAt(0)\n  }\n\n  return d\n}\n\nfunction byteArray2hexStr(byteArray: number[]): string {\n  let str = ''\n\n  for (let i = 0; i < byteArray.length; i++) {\n    str += byte2hexStr(byteArray[i])\n  }\n  return str\n}\n\nfunction pubBytesToTronBytes(pubBytes: number[]): number[] {\n  if (pubBytes.length === 65) {\n    pubBytes = pubBytes.slice(1)\n  }\n\n  const hash = keccak256(pubBytes).toString()\n  const addressHex = ADDRESS_PREFIX + hash.substring(24)\n\n  return hexStr2byteArray(addressHex)\n}\n\nfunction addressBytesToB58CheckAddress(addressBytes: number[]) {\n  const hash0 = SHA256(addressBytes)\n  const hash1 = SHA256(hash0)\n  let checkSum = hash1.slice(0, 4)\n  checkSum = addressBytes.concat(checkSum)\n  return encode58(checkSum)\n}\n\nfunction SHA256(msgBytes: number[]): number[] {\n  const shaObj = new jsSHA('SHA-256', 'HEX')\n  const msgHex = byteArray2hexStr(msgBytes)\n  shaObj.update(msgHex)\n  const hashHex = shaObj.getHash('HEX')\n  return hexStr2byteArray(hashHex)\n}\n","import { HDPrivateKey } from 'bitcore-lib'\n\nimport { BaseTronPayments } from './BaseTronPayments'\nimport Bip44Cache from './Bip44Cache'\nimport { GetAddressOptions, HdTronPaymentsConfig } from './types'\nimport { deriveAddress, derivePrivateKey, xprvToXpub } from './bip44'\nimport { DEFAULT_MAX_ADDRESS_SCAN } from './constants'\nimport { isValidXpub, isValidXprv } from './utils'\n\nconst xpubCache = new Bip44Cache()\n\nexport class HdTronPayments extends BaseTronPayments<HdTronPaymentsConfig> {\n  readonly xprv: string | null\n  readonly xpub: string\n  maxAddressScan: number\n\n  constructor(private readonly config: HdTronPaymentsConfig) {\n    super(config)\n    this.maxAddressScan = config.maxAddressScan || DEFAULT_MAX_ADDRESS_SCAN\n    if (isValidXprv(config.hdKey)) {\n      this.xprv = config.hdKey\n      this.xpub = xprvToXpub(this.xprv)\n    } else if (isValidXpub(config.hdKey)) {\n      this.xprv = null\n      this.xpub = config.hdKey\n    } else {\n      throw new Error('Account must be a valid xprv or xpub')\n    }\n  }\n\n  static generateNewKeys() {\n    const key = new HDPrivateKey()\n    const xprv = key.toString()\n    const xpub = xprvToXpub(xprv)\n    return {\n      xprv,\n      xpub,\n    }\n  }\n\n  getXpub(): string {\n    return this.xpub\n  }\n\n  getFullConfig(): HdTronPaymentsConfig {\n    return this.config\n  }\n\n  getPublicConfig(): HdTronPaymentsConfig {\n    return {\n      ...this.config,\n      hdKey: this.getXpub(),\n    }\n  }\n\n  getAccountId(index: number): string {\n    return this.getXpub()\n  }\n\n  getAccountIds(): string[] {\n    return [this.getXpub()]\n  }\n\n  async getAddress(index: number, options: GetAddressOptions = {}): Promise<string> {\n    const cacheIndex = options.cacheIndex || true\n    // this.account is an xprv or xpub\n    const xpub = this.getXpub()\n    const address = deriveAddress(xpub, index)\n    if (!this.isValidAddress(address)) {\n      // This should never happen\n      throw new Error(`Cannot get address ${index} - validation failed for derived address`)\n    }\n    if (cacheIndex) {\n      xpubCache.put(xpub, index, address)\n    }\n    return address\n  }\n\n  async getAddressIndex(address: string): Promise<number> {\n    const xpub = this.getXpub()\n    const cachedIndex = xpubCache.lookupIndex(xpub, address)\n    if (cachedIndex) {\n      return cachedIndex\n    }\n    for (let i = 0; i < this.maxAddressScan; i++) {\n      if (address === deriveAddress(xpub, i)) {\n        xpubCache.put(xpub, i, address)\n        return i\n      }\n    }\n    throw new Error(\n      'Cannot get index of address after checking cache and scanning addresses' +\n        ` from 0 to ${this.maxAddressScan - 1} (address=${address})`,\n    )\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    if (!this.xprv) {\n      throw new Error(`Cannot get private key ${index} - HdTronPayments was created with an xpub`)\n    }\n    return derivePrivateKey(this.xprv, index)\n  }\n}\n\nexport default HdTronPayments\n","import { BaseTronPayments } from './BaseTronPayments'\nimport { KeyPairTronPaymentsConfig } from './types'\n\nexport class KeyPairTronPayments extends BaseTronPayments<KeyPairTronPaymentsConfig> {\n  readonly addresses: { [index: number]: string | undefined } = {}\n  readonly privateKeys: { [index: number]: string | null | undefined } = {}\n  readonly addressIndices: { [address: string]: number | undefined } = {}\n\n  constructor(private readonly config: KeyPairTronPaymentsConfig) {\n    super(config)\n    Object.entries(config.keyPairs).forEach(([iString, addressOrKey]) => {\n      if (typeof addressOrKey === 'undefined' || addressOrKey === null) {\n        return\n      }\n      const i = Number.parseInt(iString)\n      if (this.isValidAddress(addressOrKey)) {\n        this.addresses[i] = addressOrKey\n        this.privateKeys[i] = null\n        this.addressIndices[addressOrKey] = i\n        return\n      }\n      if (this.isValidPrivateKey(addressOrKey)) {\n        const address = this.privateKeyToAddress(addressOrKey)\n        this.addresses[i] = address\n        this.privateKeys[i] = addressOrKey\n        this.addressIndices[address] = i\n        return\n      }\n      throw new Error(`KeyPairTronPaymentsConfig.keyPairs[${i}] is not a valid private key or address`)\n    })\n  }\n\n  getFullConfig(): KeyPairTronPaymentsConfig {\n    return this.config\n  }\n\n  getPublicConfig(): KeyPairTronPaymentsConfig {\n    return {\n      ...this.config,\n      keyPairs: this.addresses,\n    }\n  }\n\n  getAccountId(index: number): string {\n    const accountId = this.addresses[index]\n    if (!accountId) {\n      throw new Error(`No KeyPairTronPayments account configured at index ${index}`)\n    }\n    return accountId\n  }\n\n  getAccountIds(): string[] {\n    return Object.keys(this.addressIndices)\n  }\n\n  async getAddress(index: number): Promise<string> {\n    const address = this.addresses[index]\n    if (typeof address === 'undefined') {\n      throw new Error(`Cannot get address ${index} - keyPair[${index}] is undefined`)\n    }\n    return address\n  }\n\n  async getAddressIndex(address: string): Promise<number> {\n    const index = this.addressIndices[address]\n    if (typeof index === 'undefined') {\n      throw new Error(`Cannot get index of address ${address}`)\n    }\n    return index\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    const privateKey = this.privateKeys[index]\n    if (typeof privateKey === 'undefined') {\n      throw new Error(`Cannot get private key ${index} - keyPair[${index}] is undefined`)\n    }\n    if (privateKey === null) {\n      throw new Error(`Cannot get private key ${index} - keyPair[${index}] is a public address`)\n    }\n    return privateKey\n  }\n}\n\nexport default KeyPairTronPayments\n","import * as t from 'io-ts'\nimport { extendCodec } from '@faast/ts-common'\nimport {\n  BaseTransactionInfo,\n  BaseUnsignedTransaction,\n  BaseSignedTransaction,\n  BaseBroadcastResult,\n  CreateTransactionOptions,\n} from '@faast/payments-common'\nimport {\n  Transaction as TronWebTransaction,\n  TransactionInfo as TronWebTransactionInfo,\n  Block as TronWebBlock,\n} from 'tronweb'\n\nexport { TronWebTransaction, TronWebTransactionInfo, TronWebBlock, CreateTransactionOptions }\n\nexport type TransactionInfoRaw = TronWebTransaction &\n  TronWebTransactionInfo & {\n    currentBlock: Pick<TronWebBlock, 'blockID' | 'block_header'>\n  }\n\nexport const BaseTronPaymentsConfig = t.partial(\n  {\n    fullNode: t.string,\n    solidityNode: t.string,\n    eventServer: t.string,\n  },\n  'BaseTronPaymentsConfig',\n)\nexport type BaseTronPaymentsConfig = t.TypeOf<typeof BaseTronPaymentsConfig>\n\nexport const HdTronPaymentsConfig = extendCodec(\n  BaseTronPaymentsConfig,\n  {\n    // required\n    hdKey: t.string, // xprv or xpub\n  },\n  {\n    // optional\n    maxAddressScan: t.number, // max address scan to find address index in getAddressIndex\n  },\n  'HdTronPaymentsConfig',\n)\nexport type HdTronPaymentsConfig = t.TypeOf<typeof HdTronPaymentsConfig>\n\nconst NullableOptionalString = t.union([t.string, t.null, t.undefined])\n\nexport const KeyPairTronPaymentsConfig = extendCodec(\n  BaseTronPaymentsConfig,\n  {\n    // can be private keys or addresses\n    keyPairs: t.union([t.array(NullableOptionalString), t.record(t.number, NullableOptionalString)]),\n  },\n  'KeyPairTronPaymentsConfig',\n)\nexport type KeyPairTronPaymentsConfig = t.TypeOf<typeof KeyPairTronPaymentsConfig>\n\nexport const TronPaymentsConfig = t.union([HdTronPaymentsConfig, KeyPairTronPaymentsConfig], 'TronPaymentsConfig')\nexport type TronPaymentsConfig = t.TypeOf<typeof TronPaymentsConfig>\n\nexport const TronUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n  },\n  'TronUnsignedTransaction',\n)\nexport type TronUnsignedTransaction = t.TypeOf<typeof TronUnsignedTransaction>\n\nexport const TronSignedTransaction = extendCodec(BaseSignedTransaction, {}, {}, 'TronSignedTransaction')\nexport type TronSignedTransaction = t.TypeOf<typeof TronSignedTransaction>\n\nexport const TronTransactionInfo = extendCodec(BaseTransactionInfo, {}, {}, 'TronTransactionInfo')\nexport type TronTransactionInfo = t.TypeOf<typeof TronTransactionInfo>\n\nexport const TronBroadcastResult = extendCodec(\n  BaseBroadcastResult,\n  {\n    rebroadcast: t.boolean,\n  },\n  'TronBroadcastResult',\n)\nexport type TronBroadcastResult = t.TypeOf<typeof TronBroadcastResult>\n\nexport const GetAddressOptions = t.partial({\n  cacheIndex: t.boolean,\n})\nexport type GetAddressOptions = t.TypeOf<typeof GetAddressOptions>\n","import { PaymentsFactory } from '@faast/payments-common'\n\nimport { TronPaymentsConfig, HdTronPaymentsConfig, KeyPairTronPaymentsConfig } from './types'\nimport { HdTronPayments } from './HdTronPayments'\nimport { KeyPairTronPayments } from './KeyPairTronPayments'\n\nexport class TronPaymentsFactory implements PaymentsFactory {\n  forConfig(config: HdTronPaymentsConfig): HdTronPayments\n  forConfig(config: KeyPairTronPaymentsConfig): KeyPairTronPayments\n  forConfig(config: TronPaymentsConfig) {\n    if (HdTronPaymentsConfig.is(config)) {\n      return new HdTronPayments(config)\n    }\n    if (KeyPairTronPaymentsConfig.is(config)) {\n      return new KeyPairTronPayments(config)\n    }\n    throw new Error('Cannot instantiate tron payments for unsupported config')\n  }\n}\n\nexport default TronPaymentsFactory\n"],"names":["ec","EC","t.partial","t.string","t.number","t.union","t.null","t.undefined","t.array","t.record","t.boolean"],"mappings":"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"}