{"version":3,"file":"index.cjs.js","sources":["../src/constants.ts","../src/helpers.ts","../src/utils.ts","../src/TronPaymentsUtils.ts","../src/BaseTronPayments.ts","../src/Bip44Cache.ts","../src/base58.ts","../src/bip44.ts","../src/HdTronPayments.ts","../src/KeyPairTronPayments.ts","../src/types.ts","../src/TronPaymentsFactory.ts"],"sourcesContent":["import { FeeLevel } from '@faast/payments-common'\n\nexport const PACKAGE_NAME = 'tron-payments'\nexport const MIN_BALANCE_SUN = 100000\nexport const MIN_BALANCE_TRX = MIN_BALANCE_SUN / 1e6\nexport const DECIMAL_PLACES = 6\n\nexport const DEFAULT_FULL_NODE = process.env.TRX_FULL_NODE_URL || 'https://api.trongrid.io'\nexport const DEFAULT_SOLIDITY_NODE = process.env.TRX_SOLIDITY_NODE_URL || 'https://api.trongrid.io'\nexport const DEFAULT_EVENT_SERVER = process.env.TRX_EVENT_SERVER_URL || 'https://api.trongrid.io'\nexport const DEFAULT_FEE_LEVEL = FeeLevel.Medium\n","import TronWeb from 'tronweb'\nimport { DECIMAL_PLACES } from './constants'\nimport { createUnitConverters, Payport } from '@faast/payments-common'\nimport { isNil } from '@faast/ts-common'\n\nconst {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n} = createUnitConverters(DECIMAL_PLACES)\n\nexport {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n}\n\nexport function isValidXprv(xprv: string): boolean {\n  return xprv.startsWith('xprv')\n}\n\nexport function isValidXpub(xpub: string): boolean {\n  return xpub.startsWith('xpub')\n}\n\nexport function isValidAddress(address: string): boolean {\n  return TronWeb.isAddress(address)\n}\n\nexport function isValidExtraId(extraId: string): boolean {\n  return false\n}\n\nexport function isValidPayport(payport: Payport): boolean {\n  if (!Payport.is(payport)) {\n    return false\n  }\n  const { address, extraId } = payport\n  return isValidAddress(address) && (isNil(extraId) ? true : isValidExtraId(extraId))\n}\n\nexport function isValidPrivateKey(privateKey: string): boolean {\n  try {\n    privateKeyToAddress(privateKey)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nexport function privateKeyToAddress(privateKey: string): string {\n  const address = TronWeb.address.fromPrivateKey(privateKey)\n  if (isValidAddress(address)) {\n    return address\n  } else {\n    throw new Error('Validation failed for address derived from private key')\n  }\n}\n","/** Converts strings to Error */\nexport function toError(e: any): any {\n  if (typeof e === 'string') {\n    return new Error(e)\n  }\n  return e\n}\n","import { PaymentsUtils, BaseConfig, NetworkType, Payport } from '@faast/payments-common'\nimport {\n  toMainDenominationString,\n  toBaseDenominationString,\n  isValidXprv,\n  isValidXpub,\n  isValidAddress,\n  isValidExtraId,\n  isValidPayport,\n  isValidPrivateKey,\n  privateKeyToAddress,\n} from './helpers'\nimport { Logger, DelegateLogger, isNil, assertType } from '@faast/ts-common'\nimport { PACKAGE_NAME } from './constants'\n\nexport class TronPaymentsUtils implements PaymentsUtils {\n  networkType: NetworkType\n  logger: Logger\n\n  constructor(config: BaseConfig = {}) {\n    assertType(BaseConfig, config)\n    this.networkType = config.network || NetworkType.Mainnet\n    this.logger = new DelegateLogger(config.logger, PACKAGE_NAME)\n  }\n\n  async isValidExtraId(extraId: string): Promise<boolean> {\n    return isValidExtraId(extraId)\n  }\n\n  async isValidAddress(address: string): Promise<boolean> {\n    return isValidAddress(address)\n  }\n\n  async isValidPayport(payport: Payport): Promise<boolean> {\n    return isValidPayport(payport)\n  }\n\n  toMainDenomination(amount: string | number): string {\n    return toMainDenominationString(amount)\n  }\n\n  toBaseDenomination(amount: string | number): string {\n    return toBaseDenominationString(amount)\n  }\n\n  isValidXprv = isValidXprv\n  isValidXpub = isValidXpub\n\n  isValidPrivateKey = isValidPrivateKey\n  privateKeyToAddress = privateKeyToAddress\n}\n","import TronWeb, { Transaction as TronTransaction } from 'tronweb'\nimport { pick, get, cloneDeep } from 'lodash'\nimport {\n  BalanceResult,\n  BasePayments,\n  TransactionStatus,\n  FeeLevel,\n  FeeOption,\n  FeeRateType,\n  FeeOptionCustom,\n  ResolvedFeeOption,\n  Payport,\n  FromTo,\n  ResolveablePayport,\n} from '@faast/payments-common'\nimport { isType, DelegateLogger, Logger } from '@faast/ts-common'\n\nimport {\n  TronTransactionInfo,\n  TronUnsignedTransaction,\n  TronSignedTransaction,\n  TronBroadcastResult,\n  CreateTransactionOptions,\n  GetPayportOptions,\n  BaseTronPaymentsConfig,\n  TronWebTransaction,\n} from './types'\nimport { toBaseDenominationNumber, isValidAddress, isValidPayport } from './helpers'\nimport { toError } from './utils'\nimport {\n  DEFAULT_FULL_NODE,\n  DEFAULT_EVENT_SERVER,\n  DEFAULT_SOLIDITY_NODE,\n  MIN_BALANCE_SUN,\n  MIN_BALANCE_TRX,\n  PACKAGE_NAME,\n  DEFAULT_FEE_LEVEL,\n} from './constants'\nimport { TronPaymentsUtils } from './TronPaymentsUtils'\n\nexport abstract class BaseTronPayments<Config extends BaseTronPaymentsConfig> extends TronPaymentsUtils\n  implements\n    BasePayments<Config, TronUnsignedTransaction, TronSignedTransaction, TronBroadcastResult, TronTransactionInfo> {\n  // You may notice that many function blocks are enclosed in a try/catch.\n  // I had to do this because tronweb thinks it's a good idea to throw\n  // strings instead of Errors and now we need to convert them all ourselves\n  // to be consistent.\n\n  fullNode: string\n  solidityNode: string\n  eventServer: string\n  tronweb: TronWeb\n\n  constructor(config: Config) {\n    super(config)\n    this.fullNode = config.fullNode || DEFAULT_FULL_NODE\n    this.solidityNode = config.solidityNode || DEFAULT_SOLIDITY_NODE\n    this.eventServer = config.eventServer || DEFAULT_EVENT_SERVER\n    this.logger = new DelegateLogger(config.logger, PACKAGE_NAME)\n    this.tronweb = new TronWeb(this.fullNode, this.solidityNode, this.eventServer)\n  }\n\n  abstract getFullConfig(): Config\n  abstract getPublicConfig(): Config\n  abstract getAccountId(index: number): string\n  abstract getAccountIds(): string[]\n  abstract async getPayport(index: number, options?: GetPayportOptions): Promise<Payport>\n  abstract async getPrivateKey(index: number): Promise<string>\n\n  async init() {}\n  async destroy() {}\n\n  requiresBalanceMonitor() {\n    return false\n  }\n\n  async getBalance(resolveablePayport: ResolveablePayport): Promise<BalanceResult> {\n    try {\n      const payport = await this.resolvePayport(resolveablePayport)\n      const balanceSun = await this.tronweb.trx.getBalance(payport.address)\n      this.logger.debug(`trx.getBalance(${payport.address}) -> ${balanceSun}`)\n      const sweepable = this.canSweepBalance(balanceSun)\n      return {\n        confirmedBalance: this.toMainDenomination(balanceSun).toString(),\n        unconfirmedBalance: '0',\n        sweepable,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async resolveFeeOption(feeOption: FeeOption): Promise<ResolvedFeeOption> {\n    let targetFeeLevel: FeeLevel\n    if (isType(FeeOptionCustom, feeOption)) {\n      if (feeOption.feeRate !== '0') {\n        throw new Error('tron-payments custom fees are unsupported')\n      }\n      targetFeeLevel = FeeLevel.Custom\n    } else {\n      targetFeeLevel = feeOption.feeLevel || DEFAULT_FEE_LEVEL\n    }\n    return {\n      targetFeeLevel,\n      targetFeeRate: '0',\n      targetFeeRateType: FeeRateType.Base,\n      feeBase: '0',\n      feeMain: '0',\n    }\n  }\n\n  async createSweepTransaction(\n    from: number,\n    to: ResolveablePayport,\n    options: CreateTransactionOptions = {},\n  ): Promise<TronUnsignedTransaction> {\n    this.logger.debug('createSweepTransaction', from, to)\n    try {\n      const { fromAddress, fromIndex, fromPayport, toAddress, toIndex } = await this.resolveFromTo(from, to)\n      const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeBase, feeMain } = await this.resolveFeeOption(\n        options,\n      )\n      const feeSun = Number.parseInt(feeBase)\n      const { confirmedBalance: balanceTrx } = await this.getBalance(fromPayport)\n      const balanceSun = toBaseDenominationNumber(balanceTrx)\n      if (!this.canSweepBalance(balanceSun)) {\n        throw new Error(\n          `Insufficient balance (${balanceTrx}) to sweep with fee of ${feeMain} ` +\n            `while maintaining a minimum required balance of ${MIN_BALANCE_TRX}`,\n        )\n      }\n      const amountSun = balanceSun - feeSun - MIN_BALANCE_SUN\n      const amountTrx = this.toMainDenomination(amountSun)\n      const tx = await this.tronweb.transactionBuilder.sendTrx(toAddress, amountSun, fromAddress)\n      return {\n        id: tx.txID,\n        fromAddress,\n        toAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        amount: amountTrx,\n        fee: feeMain,\n        targetFeeLevel,\n        targetFeeRate,\n        targetFeeRateType,\n        status: TransactionStatus.Unsigned,\n        data: tx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async createTransaction(\n    from: number,\n    to: ResolveablePayport,\n    amountTrx: string,\n    options: CreateTransactionOptions = {},\n  ): Promise<TronUnsignedTransaction> {\n    this.logger.debug('createTransaction', from, to, amountTrx)\n    try {\n      const { fromAddress, fromIndex, fromPayport, toAddress, toIndex } = await this.resolveFromTo(from, to)\n      const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeBase, feeMain } = await this.resolveFeeOption(\n        options,\n      )\n      const feeSun = Number.parseInt(feeBase)\n      const { confirmedBalance: balanceTrx } = await this.getBalance(fromPayport)\n      const balanceSun = toBaseDenominationNumber(balanceTrx)\n      const amountSun = toBaseDenominationNumber(amountTrx)\n      if (balanceSun - feeSun - MIN_BALANCE_SUN < amountSun) {\n        throw new Error(\n          `Insufficient balance (${balanceTrx}) to send ${amountTrx} including fee of ${feeMain} ` +\n            `while maintaining a minimum required balance of ${MIN_BALANCE_TRX}`,\n        )\n      }\n      const tx = await this.tronweb.transactionBuilder.sendTrx(toAddress, amountSun, fromAddress)\n      return {\n        id: tx.txID,\n        fromAddress,\n        toAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        amount: amountTrx,\n        fee: feeMain,\n        targetFeeLevel,\n        targetFeeRate,\n        targetFeeRateType,\n        status: TransactionStatus.Unsigned,\n        data: tx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async signTransaction(unsignedTx: TronUnsignedTransaction): Promise<TronSignedTransaction> {\n    try {\n      const fromPrivateKey = await this.getPrivateKey(unsignedTx.fromIndex)\n      const unsignedRaw = cloneDeep(unsignedTx.data) as TronWebTransaction // tron modifies unsigned object\n      const signedTx = await this.tronweb.trx.sign(unsignedRaw, fromPrivateKey)\n      return {\n        ...unsignedTx,\n        status: TransactionStatus.Signed,\n        data: signedTx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async broadcastTransaction(tx: TronSignedTransaction): Promise<TronBroadcastResult> {\n    /*\n     * I’ve discovered that tron nodes like to “remember” every transaction you give it.\n     * If you try broadcasting an invalid TX the first time you’ll get a `SIGERROR` but\n     * every subsequent broadcast gives a `DUP_TRANSACTION_ERROR`. Which is the exact same\n     * error you get after rebroadcasting a valid transaction. And to make things worse,\n     * if you try to look up the invalid transaction by ID it tells you `Transaction not found`.\n     * So in order to actually determine the status of a broadcast the logic becomes:\n     * `success status` -> broadcast succeeded\n     * `error status` -> broadcast failed\n     * `(DUP_TRANSACTION_ERROR && Transaction found)` -> tx already broadcast\n     * `(DUP_TRANASCTION_ERROR && Transaction not found)` -> tx was probably invalid? Maybe? Who knows…\n     */\n    try {\n      const status = await this.tronweb.trx.sendRawTransaction(tx.data as TronWebTransaction)\n      let success = false\n      let rebroadcast = false\n      if (status.result || status.code === 'SUCCESS') {\n        success = true\n      } else {\n        try {\n          await this.tronweb.trx.getTransaction(tx.id)\n          success = true\n          rebroadcast = true\n        } catch (e) {}\n      }\n      if (success) {\n        return {\n          id: tx.id,\n          rebroadcast,\n        }\n      } else {\n        let statusCode: string | undefined = status.code\n        if (statusCode === 'DUP_TRANSACTION_ERROR') {\n          statusCode = 'DUP_TX_BUT_TX_NOT_FOUND_SO_PROBABLY_INVALID_TX_ERROR'\n        }\n        this.logger.warn(`Tron broadcast tx unsuccessful ${tx.id}`, status)\n        throw new Error(`Failed to broadcast transaction: ${statusCode} ${status.message}`)\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async getTransactionInfo(txid: string): Promise<TronTransactionInfo> {\n    try {\n      const [tx, txInfo, currentBlock] = await Promise.all([\n        this.tronweb.trx.getTransaction(txid),\n        this.tronweb.trx.getTransactionInfo(txid),\n        this.tronweb.trx.getCurrentBlock(),\n      ])\n\n      const { amountTrx, fromAddress, toAddress } = this.extractTxFields(tx)\n\n      const contractRet = get(tx, 'ret[0].contractRet')\n      const isExecuted = contractRet === 'SUCCESS'\n\n      const block = txInfo.blockNumber || null\n      const feeTrx = this.toMainDenomination(txInfo.fee || 0)\n\n      const currentBlockNumber = get(currentBlock, 'block_header.raw_data.number', 0)\n      const confirmations = currentBlockNumber && block ? currentBlockNumber - block : 0\n      const isConfirmed = confirmations > 0\n\n      const confirmationTimestamp = txInfo.blockTimeStamp ? new Date(txInfo.blockTimeStamp) : null\n\n      let status: TransactionStatus = TransactionStatus.Pending\n      if (isConfirmed) {\n        if (!isExecuted) {\n          status = TransactionStatus.Failed\n        }\n        status = TransactionStatus.Confirmed\n      }\n\n      return {\n        id: tx.txID,\n        amount: amountTrx,\n        toAddress,\n        fromAddress,\n        toExtraId: null,\n        fromIndex: null,\n        toIndex: null,\n        fee: feeTrx,\n        isExecuted,\n        isConfirmed,\n        confirmations,\n        confirmationId: block ? String(block) : null,\n        confirmationTimestamp,\n        status,\n        data: {\n          ...tx,\n          ...txInfo,\n          currentBlock: pick(currentBlock, 'block_header', 'blockID'),\n        },\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  isSweepableBalance(balanceTrx: string): boolean {\n    return this.canSweepBalance(toBaseDenominationNumber(balanceTrx))\n  }\n\n  // HELPERS\n\n  private canSweepBalance(balanceSun: number): boolean {\n    return balanceSun > MIN_BALANCE_SUN\n  }\n\n  private extractTxFields(tx: TronTransaction) {\n    const contractParam = get(tx, 'raw_data.contract[0].parameter.value')\n    if (!(contractParam && typeof contractParam.amount === 'number')) {\n      throw new Error('Unable to get transaction')\n    }\n\n    const amountSun = contractParam.amount || 0\n    const amountTrx = this.toMainDenomination(amountSun)\n    const toAddress = this.tronweb.address.fromHex(contractParam.to_address)\n    const fromAddress = this.tronweb.address.fromHex(contractParam.owner_address)\n    return {\n      amountTrx,\n      amountSun,\n      toAddress,\n      fromAddress,\n    }\n  }\n\n  async resolvePayport(payport: ResolveablePayport): Promise<Payport> {\n    if (typeof payport === 'number') {\n      return this.getPayport(payport)\n    } else if (typeof payport === 'string') {\n      if (!isValidAddress(payport)) {\n        throw new Error(`Invalid TRON address: ${payport}`)\n      }\n      return { address: payport }\n    }\n    if (!isValidPayport(payport)) {\n      throw new Error(`Invalid TRON payport: ${JSON.stringify(payport)}`)\n    }\n    return payport\n  }\n\n  async resolveFromTo(from: number, to: ResolveablePayport): Promise<FromTo> {\n    const fromPayport = await this.getPayport(from)\n    const toPayport = await this.resolvePayport(to)\n    return {\n      fromAddress: fromPayport.address,\n      fromIndex: from,\n      fromExtraId: fromPayport.extraId,\n      fromPayport,\n      toAddress: toPayport.address,\n      toIndex: typeof to === 'number' ? to : null,\n      toExtraId: toPayport.extraId,\n      toPayport,\n    }\n  }\n}\n\nexport default BaseTronPayments\n","import { set, get } from 'lodash'\n\n/**\n * Caches all addresses and indices derived from xpubs. Keeping this a module level variable allows\n * multiple instances of TronPayments using the same xpub to share cached values. We could use a\n * real lru cache here but even if we cached 1,000,000 addresses we'd only use ~150 MB of memory.\n *\n * 2 entries * (34 chars in address * 2 bytes per char + 8 bytes per number) = 152 bytes per address\n * 1000000 addresses * 152 bytes = 152 MB\n */\nexport class Bip44Cache {\n  store: {\n    [xpub: string]: {\n      addresses: { [index: number]: string }\n      indices: { [address: string]: number }\n    }\n  } = {}\n\n  put(xpub: string, index: number, address: string): void {\n    set(this.store, [xpub, 'addresses', index], address)\n    set(this.store, [xpub, 'indices', address], index)\n  }\n\n  lookupIndex(xpub: string, address: string): number | undefined {\n    return get(this.store, [xpub, 'indices', address])\n  }\n\n  lookupAddress(xpub: string, index: number): string | undefined {\n    return get(this.store, [xpub, 'addresses', index])\n  }\n}\n\nexport default Bip44Cache\n","// Borrowed from tronWeb\n// https://github.com/tronprotocol/tron-web/blob/master/src/utils/base58.js\n\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\nconst ALPHABET_MAP: { [c: string]: number } = {}\n\nfor (let i = 0; i < ALPHABET.length; i++) {\n  ALPHABET_MAP[ALPHABET.charAt(i)] = i\n}\n\nconst BASE = 58\n\nexport function encode58(buffer: Buffer | number[]) {\n  if (buffer.length === 0) {\n    return ''\n  }\n\n  let i\n  let j\n\n  const digits = [0]\n\n  for (i = 0; i < buffer.length; i++) {\n    for (j = 0; j < digits.length; j++) {\n      digits[j] <<= 8\n    }\n\n    digits[0] += buffer[i]\n    let carry = 0\n\n    for (j = 0; j < digits.length; ++j) {\n      digits[j] += carry\n      carry = (digits[j] / BASE) | 0\n      digits[j] %= BASE\n    }\n\n    while (carry) {\n      digits.push(carry % BASE)\n      carry = (carry / BASE) | 0\n    }\n  }\n\n  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {\n    digits.push(0)\n  }\n\n  return digits\n    .reverse()\n    .map(digit => ALPHABET[digit])\n    .join('')\n}\n\nexport function decode58(s: string): number[] {\n  if (s.length === 0) {\n    return []\n  }\n\n  let i\n  let j\n\n  const bytes = [0]\n\n  for (i = 0; i < s.length; i++) {\n    const c = s[i]\n\n    if (!(c in ALPHABET_MAP)) {\n      throw new Error('Non-base58 character')\n    }\n\n    for (j = 0; j < bytes.length; j++) {\n      bytes[j] *= BASE\n    }\n\n    bytes[0] += ALPHABET_MAP[c]\n    let carry = 0\n\n    for (j = 0; j < bytes.length; ++j) {\n      bytes[j] += carry\n      carry = bytes[j] >> 8\n      bytes[j] &= 0xff\n    }\n\n    while (carry) {\n      bytes.push(carry & 0xff)\n      carry >>= 8\n    }\n  }\n\n  for (i = 0; s[i] === '1' && i < s.length - 1; i++) {\n    bytes.push(0)\n  }\n\n  return bytes.reverse()\n}\n","// Many parts of this code are snippets from tronWeb:\n// https://github.com/tronprotocol/tron-web/blob/master/src/index.js\n\nimport { BIP32Interface as HDNode, fromBase58, fromSeed } from 'bip32'\nimport { keccak256 } from 'js-sha3'\nimport jsSHA from 'jssha'\nimport { ec as EC } from 'elliptic'\nimport crypto from 'crypto'\n\nimport { encode58 } from './base58'\nimport { isValidXpub, isValidXprv } from './helpers'\n\nconst ec = new EC('secp256k1')\n\nexport const derivationPath = \"m/44'/195'/0'\"\nconst derivationPathParts = derivationPath.split('/').slice(1)\n\ntype HDKey<K> = {\n  depth: number\n  derive: (path: string | number, hardened?: boolean) => K\n}\n\nexport function deriveAddress(xpub: string, index: number): string {\n  if (!isValidXpub(xpub)) {\n    throw new Error('Invalid xpub')\n  }\n  const key = fromBase58(xpub)\n  const derived = deriveBasePath(key)\n    .derive(0)\n    .derive(index)\n  return hdPublicKeyToAddress(derived)\n}\n\nexport function derivePrivateKey(xprv: string, index: number): string {\n  if (!isValidXprv(xprv)) {\n    throw new Error('Invalid xprv')\n  }\n  const key = fromBase58(xprv)\n  const derived = deriveBasePath(key)\n    .derive(0)\n    .derive(index)\n  return hdPrivateKeyToPrivateKey(derived)\n}\n\nexport function xprvToXpub(xprv: string | HDNode): string {\n  const key = typeof xprv === 'string' ? fromBase58(xprv) : xprv\n  const derivedPubKey = deriveBasePath(key)\n  return derivedPubKey.neutered().toBase58()\n}\n\nexport function generateNewKeys(): { xpub: string; xprv: string } {\n  const key = fromSeed(crypto.randomBytes(32))\n  const xprv = key.toBase58()\n  const xpub = xprvToXpub(xprv)\n  return {\n    xprv,\n    xpub,\n  }\n}\n\n// HELPER FUNCTIONS\n\nfunction deriveBasePath(key: HDNode): HDNode {\n  const parts = derivationPathParts.slice(key.depth)\n  if (parts.length > 0) {\n    return key.derivePath(`m/${parts.join('/')}`)\n  }\n  return key\n}\n\nfunction hdPublicKeyToAddress(key: HDNode): string {\n  return addressBytesToB58CheckAddress(pubBytesToTronBytes(bip32PublicToTronPublic(key.publicKey)))\n}\n\nfunction hdPrivateKeyToPrivateKey(key: HDNode): string {\n  if (key.isNeutered() || typeof key.privateKey === 'undefined') {\n    throw new Error('Invalid HD private key, must not be neutered')\n  }\n  return bip32PrivateToTronPrivate(key.privateKey)\n}\n\nfunction bip32PublicToTronPublic(pubKey: any): number[] {\n  const pubkey = ec.keyFromPublic(pubKey).getPublic()\n  const x = pubkey.x\n  const y = pubkey.y\n\n  let xHex = x.toString('hex')\n\n  while (xHex.length < 64) {\n    xHex = `0${xHex}`\n  }\n\n  let yHex = y.toString('hex')\n\n  while (yHex.length < 64) {\n    yHex = `0${yHex}`\n  }\n\n  const pubkeyHex = `04${xHex}${yHex}`\n  const pubkeyBytes = hexStr2byteArray(pubkeyHex)\n\n  return pubkeyBytes\n}\n\nfunction bip32PrivateToTronPrivate(priKeyBytes: Buffer): string {\n  const key = ec.keyFromPrivate(priKeyBytes, 'bytes')\n  const privkey = key.getPrivate() as Buffer\n  let priKeyHex = privkey.toString('hex')\n  while (priKeyHex.length < 64) {\n    priKeyHex = `0${priKeyHex}`\n  }\n  let privArray = hexStr2byteArray(priKeyHex)\n  return byteArray2hexStr(privArray)\n}\n\n// Borrowed from tronweb:  https://github.com/tronprotocol/tron-web/blob/master/src/utils/code.js\nconst ADDRESS_PREFIX = '41'\nfunction byte2hexStr(byte: number): string {\n  const hexByteMap = '0123456789ABCDEF'\n\n  let str = ''\n  str += hexByteMap.charAt(byte >> 4)\n  str += hexByteMap.charAt(byte & 0x0f)\n\n  return str\n}\n\nfunction hexStr2byteArray(str: string): number[] {\n  const byteArray = Array()\n  let d = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i)\n\n    if (isHexChar(c)) {\n      d <<= 4\n      d += hexChar2byte(c)\n      j++\n\n      if (0 === j % 2) {\n        byteArray[k++] = d\n        d = 0\n      }\n    }\n  }\n\n  return byteArray\n}\n\nfunction isHexChar(c: string): boolean {\n  return (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f') || (c >= '0' && c <= '9')\n}\n\nfunction hexChar2byte(c: string): number {\n  let d = 0\n\n  if (c >= 'A' && c <= 'F') {\n    d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10\n  } else if (c >= 'a' && c <= 'f') {\n    d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10\n  } else if (c >= '0' && c <= '9') {\n    d = c.charCodeAt(0) - '0'.charCodeAt(0)\n  }\n\n  return d\n}\n\nfunction byteArray2hexStr(byteArray: number[]): string {\n  let str = ''\n\n  for (let i = 0; i < byteArray.length; i++) {\n    str += byte2hexStr(byteArray[i])\n  }\n  return str\n}\n\nfunction pubBytesToTronBytes(pubBytes: number[]): number[] {\n  if (pubBytes.length === 65) {\n    pubBytes = pubBytes.slice(1)\n  }\n\n  const hash = keccak256(pubBytes).toString()\n  const addressHex = ADDRESS_PREFIX + hash.substring(24)\n\n  return hexStr2byteArray(addressHex)\n}\n\nfunction addressBytesToB58CheckAddress(addressBytes: number[]) {\n  const hash0 = SHA256(addressBytes)\n  const hash1 = SHA256(hash0)\n  let checkSum = hash1.slice(0, 4)\n  checkSum = addressBytes.concat(checkSum)\n  return encode58(checkSum)\n}\n\nfunction SHA256(msgBytes: number[]): number[] {\n  const shaObj = new jsSHA('SHA-256', 'HEX')\n  const msgHex = byteArray2hexStr(msgBytes)\n  shaObj.update(msgHex)\n  const hashHex = shaObj.getHash('HEX')\n  return hexStr2byteArray(hashHex)\n}\n","import { BaseTronPayments } from './BaseTronPayments'\nimport Bip44Cache from './Bip44Cache'\nimport { HdTronPaymentsConfig, GetPayportOptions } from './types'\nimport { deriveAddress, derivePrivateKey, xprvToXpub, generateNewKeys } from './bip44'\nimport { Payport } from '@faast/payments-common'\nimport { isValidXprv, isValidXpub, isValidAddress } from './helpers'\n\nconst xpubCache = new Bip44Cache()\n\nexport class HdTronPayments extends BaseTronPayments<HdTronPaymentsConfig> {\n  readonly xprv: string | null\n  readonly xpub: string\n\n  constructor(private readonly config: HdTronPaymentsConfig) {\n    super(config)\n    if (isValidXprv(config.hdKey)) {\n      this.xprv = config.hdKey\n      this.xpub = xprvToXpub(this.xprv)\n    } else if (isValidXpub(config.hdKey)) {\n      this.xprv = null\n      this.xpub = config.hdKey\n    } else {\n      throw new Error('Account must be a valid xprv or xpub')\n    }\n  }\n\n  static generateNewKeys = generateNewKeys\n\n  getXpub(): string {\n    return this.xpub\n  }\n\n  getFullConfig(): HdTronPaymentsConfig {\n    return this.config\n  }\n\n  getPublicConfig(): HdTronPaymentsConfig {\n    return {\n      ...this.config,\n      hdKey: this.getXpub(),\n    }\n  }\n\n  getAccountId(index: number): string {\n    return this.getXpub()\n  }\n\n  getAccountIds(): string[] {\n    return [this.getXpub()]\n  }\n\n  async getPayport(index: number, options: GetPayportOptions = {}): Promise<Payport> {\n    const cacheIndex = options.cacheIndex || true\n    // this.account is an xprv or xpub\n    const xpub = this.getXpub()\n    const address = deriveAddress(xpub, index)\n    if (!isValidAddress(address)) {\n      // This should never happen\n      throw new Error(`Cannot get address ${index} - validation failed for derived address`)\n    }\n    if (cacheIndex) {\n      xpubCache.put(xpub, index, address)\n    }\n    return { address }\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    if (!this.xprv) {\n      throw new Error(`Cannot get private key ${index} - HdTronPayments was created with an xpub`)\n    }\n    return derivePrivateKey(this.xprv, index)\n  }\n}\n\nexport default HdTronPayments\n","import { BaseTronPayments } from './BaseTronPayments'\nimport { KeyPairTronPaymentsConfig } from './types'\nimport { isValidAddress, isValidPrivateKey, privateKeyToAddress } from './helpers'\nimport { Payport } from '@faast/payments-common'\n\nexport class KeyPairTronPayments extends BaseTronPayments<KeyPairTronPaymentsConfig> {\n  readonly addresses: { [index: number]: string | undefined } = {}\n  readonly privateKeys: { [index: number]: string | null | undefined } = {}\n  readonly addressIndices: { [address: string]: number | undefined } = {}\n\n  constructor(private readonly config: KeyPairTronPaymentsConfig) {\n    super(config)\n    Object.entries(config.keyPairs).forEach(([iString, addressOrKey]) => {\n      if (typeof addressOrKey === 'undefined' || addressOrKey === null) {\n        return\n      }\n      const i = Number.parseInt(iString)\n      if (isValidAddress(addressOrKey)) {\n        this.addresses[i] = addressOrKey\n        this.privateKeys[i] = null\n        this.addressIndices[addressOrKey] = i\n        return\n      }\n      if (isValidPrivateKey(addressOrKey)) {\n        const address = privateKeyToAddress(addressOrKey)\n        this.addresses[i] = address\n        this.privateKeys[i] = addressOrKey\n        this.addressIndices[address] = i\n        return\n      }\n      throw new Error(`KeyPairTronPaymentsConfig.keyPairs[${i}] is not a valid private key or address`)\n    })\n  }\n\n  getFullConfig(): KeyPairTronPaymentsConfig {\n    return this.config\n  }\n\n  getPublicConfig(): KeyPairTronPaymentsConfig {\n    return {\n      ...this.config,\n      keyPairs: this.addresses,\n    }\n  }\n\n  getAccountId(index: number): string {\n    const accountId = this.addresses[index]\n    if (!accountId) {\n      throw new Error(`No KeyPairTronPayments account configured at index ${index}`)\n    }\n    return accountId\n  }\n\n  getAccountIds(): string[] {\n    return Object.keys(this.addressIndices)\n  }\n\n  async getPayport(index: number): Promise<Payport> {\n    const address = this.addresses[index]\n    if (typeof address === 'undefined') {\n      throw new Error(`Cannot get address ${index} - keyPair[${index}] is undefined`)\n    }\n    return { address }\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    const privateKey = this.privateKeys[index]\n    if (typeof privateKey === 'undefined') {\n      throw new Error(`Cannot get private key ${index} - keyPair[${index}] is undefined`)\n    }\n    if (privateKey === null) {\n      throw new Error(`Cannot get private key ${index} - keyPair[${index}] is a public address`)\n    }\n    return privateKey\n  }\n}\n\nexport default KeyPairTronPayments\n","import * as t from 'io-ts'\nimport { extendCodec, Logger } from '@faast/ts-common'\nimport {\n  BaseTransactionInfo,\n  BaseUnsignedTransaction,\n  BaseSignedTransaction,\n  BaseBroadcastResult,\n  CreateTransactionOptions,\n  BaseConfig,\n  FromTo,\n  Payport,\n} from '@faast/payments-common'\nimport {\n  Transaction as TronWebTransaction,\n  TransactionInfo as TronWebTransactionInfo,\n  Block as TronWebBlock,\n} from 'tronweb'\n\nexport { TronWebTransaction, TronWebTransactionInfo, TronWebBlock, CreateTransactionOptions }\n\nexport type TransactionInfoRaw = TronWebTransaction &\n  TronWebTransactionInfo & {\n    currentBlock: Pick<TronWebBlock, 'blockID' | 'block_header'>\n  }\n\nexport const BaseTronPaymentsConfig = extendCodec(\n  BaseConfig,\n  {},\n  {\n    fullNode: t.string,\n    solidityNode: t.string,\n    eventServer: t.string,\n    logger: Logger,\n  },\n  'BaseTronPaymentsConfig',\n)\nexport type BaseTronPaymentsConfig = t.TypeOf<typeof BaseTronPaymentsConfig>\n\nexport const HdTronPaymentsConfig = extendCodec(\n  BaseTronPaymentsConfig,\n  {\n    // required\n    hdKey: t.string, // xprv or xpub\n  },\n  'HdTronPaymentsConfig',\n)\nexport type HdTronPaymentsConfig = t.TypeOf<typeof HdTronPaymentsConfig>\n\nconst NullableOptionalString = t.union([t.string, t.null, t.undefined])\n\nexport const KeyPairTronPaymentsConfig = extendCodec(\n  BaseTronPaymentsConfig,\n  {\n    // can be private keys or addresses\n    keyPairs: t.union([t.array(NullableOptionalString), t.record(t.number, NullableOptionalString)]),\n  },\n  'KeyPairTronPaymentsConfig',\n)\nexport type KeyPairTronPaymentsConfig = t.TypeOf<typeof KeyPairTronPaymentsConfig>\n\nexport const TronPaymentsConfig = t.union([HdTronPaymentsConfig, KeyPairTronPaymentsConfig], 'TronPaymentsConfig')\nexport type TronPaymentsConfig = t.TypeOf<typeof TronPaymentsConfig>\n\nexport const TronUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n  },\n  'TronUnsignedTransaction',\n)\nexport type TronUnsignedTransaction = t.TypeOf<typeof TronUnsignedTransaction>\n\nexport const TronSignedTransaction = extendCodec(BaseSignedTransaction, {}, {}, 'TronSignedTransaction')\nexport type TronSignedTransaction = t.TypeOf<typeof TronSignedTransaction>\n\nexport const TronTransactionInfo = extendCodec(BaseTransactionInfo, {}, {}, 'TronTransactionInfo')\nexport type TronTransactionInfo = t.TypeOf<typeof TronTransactionInfo>\n\nexport const TronBroadcastResult = extendCodec(\n  BaseBroadcastResult,\n  {\n    rebroadcast: t.boolean,\n  },\n  'TronBroadcastResult',\n)\nexport type TronBroadcastResult = t.TypeOf<typeof TronBroadcastResult>\n\nexport const GetPayportOptions = t.partial({\n  cacheIndex: t.boolean,\n})\nexport type GetPayportOptions = t.TypeOf<typeof GetPayportOptions>\n\nexport type FromToWithPayport = FromTo & {\n  fromPayport: Payport\n  toPayport: Payport\n}\n","import { PaymentsFactory } from '@faast/payments-common'\n\nimport { TronPaymentsConfig, HdTronPaymentsConfig, KeyPairTronPaymentsConfig } from './types'\nimport { HdTronPayments } from './HdTronPayments'\nimport { KeyPairTronPayments } from './KeyPairTronPayments'\n\nexport class TronPaymentsFactory implements PaymentsFactory<TronPaymentsConfig> {\n  forConfig(config: HdTronPaymentsConfig): HdTronPayments\n  forConfig(config: KeyPairTronPaymentsConfig): KeyPairTronPayments\n  forConfig(config: TronPaymentsConfig) {\n    if (HdTronPaymentsConfig.is(config)) {\n      return new HdTronPayments(config)\n    }\n    if (KeyPairTronPaymentsConfig.is(config)) {\n      return new KeyPairTronPayments(config)\n    }\n    throw new Error('Cannot instantiate tron payments for unsupported config')\n  }\n}\n\nexport default TronPaymentsFactory\n"],"names":["FeeLevel","createUnitConverters","Payport","isNil","assertType","BaseConfig","NetworkType","DelegateLogger","isType","FeeOptionCustom","FeeRateType","TransactionStatus","cloneDeep","get","pick","set","EC","fromBase58","fromSeed","keccak256","extendCodec","t.string","Logger","t.union","t.null","t.undefined","t.array","t.record","t.number","BaseUnsignedTransaction","BaseSignedTransaction","BaseTransactionInfo","BaseBroadcastResult","t.boolean","t.partial"],"mappings":"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"}