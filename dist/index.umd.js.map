{"version":3,"file":"index.umd.js","sources":["../src/utils.ts","../src/constants.ts","../src/BaseTronPayments.ts","../src/Bip44Cache.ts","../src/base58.ts","../src/bip44.ts","../src/HdTronPayments.ts","../src/KeyPairTronPayments.ts","../src/TronPaymentsFactory.ts","../src/types.ts"],"sourcesContent":["/** Converts strings to Error */\nexport function toError(e: any): any {\n  if (typeof e === 'string') {\n    return new Error(e)\n  }\n  return e\n}\n\nexport function toMainDenominationNumber(amountSun: number | string): number {\n  return (typeof amountSun === 'number' ? amountSun : Number.parseInt(amountSun)) / 1e6\n}\n\nexport function toMainDenomination(amountSun: number | string): string {\n  return toMainDenominationNumber(amountSun).toString()\n}\n\nexport function toBaseDenominationNumber(amountTrx: number | string): number {\n  return (typeof amountTrx === 'number' ? amountTrx : Number.parseFloat(amountTrx)) * 1e6\n}\n\nexport function toBaseDenomination(amountTrx: number | string): string {\n  return toBaseDenominationNumber(amountTrx).toString()\n}\n\nexport function isValidXprv(xprv: string): boolean {\n  return xprv.startsWith('xprv')\n}\n\nexport function isValidXpub(xpub: string): boolean {\n  return xpub.startsWith('xpub')\n}\n","export const TRX_FEE_FOR_TRANSFER = Number.parseInt(process.env.TRX_FEE_FOR_TRANSFER || '1000')\nexport const TRX_FEE_FOR_TRANSFER_SUN = TRX_FEE_FOR_TRANSFER * 100\n\nexport const DEFAULT_FULL_NODE = process.env.TRX_FULL_NODE_URL || 'http://54.236.37.243:8090'\nexport const DEFAULT_SOLIDITY_NODE = process.env.TRX_SOLIDITY_NODE_URL || 'http://47.89.187.247:8091'\nexport const DEFAULT_EVENT_SERVER = process.env.TRX_EVENT_SERVER_URL || 'https://api.trongrid.io'\nexport const DEFAULT_MAX_ADDRESS_SCAN = 10\n","import TronWeb, { Transaction as TronTransaction } from 'tronweb'\nimport { pick, get, cloneDeep } from 'lodash'\nimport { BalanceResult, PaymentsInterface, TransactionStatus } from 'payments-common'\n\nimport {\n  TronTransactionInfo, TronUnsignedTransaction, TronSignedTransaction, TronBroadcastResult,\n  CreateTransactionOptions, GetAddressOptions, BaseTronPaymentsConfig, TronWebTransaction,\n} from './types'\nimport { toMainDenomination, toBaseDenomination, toBaseDenominationNumber, toError } from './utils'\nimport {\n  TRX_FEE_FOR_TRANSFER_SUN,\n  DEFAULT_FULL_NODE, DEFAULT_EVENT_SERVER, DEFAULT_SOLIDITY_NODE,\n} from './constants'\n\nexport abstract class BaseTronPayments implements PaymentsInterface<\n  TronUnsignedTransaction, TronSignedTransaction, TronBroadcastResult, TronTransactionInfo\n> {\n  // You may notice that many function blocks are enclosed in a try/catch.\n  // I had to do this because tronweb thinks it's a good idea to throw\n  // strings instead of Errors and now we need to convert them all ourselves\n  // to be consistent.\n\n  fullNode: string\n  solidityNode: string\n  eventServer: string\n  tronweb: TronWeb\n\n  constructor(config: BaseTronPaymentsConfig) {\n    this.fullNode = config.fullNode || DEFAULT_FULL_NODE\n    this.solidityNode = config.solidityNode || DEFAULT_SOLIDITY_NODE\n    this.eventServer = config.eventServer || DEFAULT_EVENT_SERVER\n\n    this.tronweb = new TronWeb(\n      this.fullNode,\n      this.solidityNode,\n      this.eventServer\n    )\n  }\n\n  static toMainDenomination = toMainDenomination\n  static toBaseDenomination = toBaseDenomination\n  toMainDenomination = toMainDenomination\n  toBaseDenomination = toBaseDenomination\n\n  isValidAddress(address: string): boolean {\n    return this.tronweb.isAddress(address)\n  }\n\n  isValidPrivateKey(privateKey: string): boolean {\n    try {\n      this.privateKeyToAddress(privateKey)\n      return true\n    } catch(e) {\n      return false\n    }\n  }\n\n  privateKeyToAddress(privateKey: string): string {\n    const address = this.tronweb.address.fromPrivateKey(privateKey)\n    if (this.isValidAddress(address)) {\n      return address\n    } else {\n      throw new Error('Validation failed for address derived from private key')\n    }\n  }\n\n  abstract async getAddress(index: number, options?: GetAddressOptions): Promise<string>\n  abstract async getAddressIndex(address: string): Promise<number>\n  abstract async getPrivateKey(index: number): Promise<string>\n\n  async getAddressOrNull(index: number, options?: GetAddressOptions): Promise<string | null> {\n    try {\n      return await this.getAddress(index, options)\n    } catch(e) {\n      return null\n    }\n  }\n\n  async getAddressIndexOrNull(address: string): Promise<number | null> {\n    try {\n      return await this.getAddressIndex(address)\n    } catch(e) {\n      return null\n    }\n  }\n\n  async getBalance(addressOrIndex: string | number): Promise<BalanceResult> {\n    try {\n      const address = await this.resolveAddress(addressOrIndex)\n      const balanceSun = await this.tronweb.trx.getBalance(address)\n      return {\n        balance: toMainDenomination(balanceSun).toString(),\n        unconfirmedBalance: '0',\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async canSweep(addressOrIndex: string | number): Promise<boolean> {\n    const { balance } = await this.getBalance(addressOrIndex)\n    return this.canSweepBalance(toBaseDenominationNumber(balance))\n  }\n\n  async createSweepTransaction(\n    from: string | number, to: string | number, options: CreateTransactionOptions = {}\n  ): Promise<TronUnsignedTransaction> {\n    try {\n      const {\n        fromAddress, fromIndex, toAddress, toIndex\n      } = await this.resolveFromTo(from, to)\n      const feeSun = options.fee || TRX_FEE_FOR_TRANSFER_SUN\n      const feeTrx = toMainDenomination(feeSun)\n      const balanceSun = await this.tronweb.trx.getBalance(fromAddress)\n      const balanceTrx = toMainDenomination(balanceSun)\n      if (!this.canSweepBalance(balanceSun)) {\n        throw new Error(`Insufficient balance (${balanceTrx}) to sweep with fee of ${feeTrx}`)\n      }\n      const amountSun = balanceSun - feeSun\n      const amountTrx = toMainDenomination(amountSun)\n      const tx = await this.tronweb.transactionBuilder.sendTrx(toAddress, amountSun, fromAddress)\n      return {\n        id: tx.txID,\n        from: fromAddress,\n        to: toAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        amount: amountTrx,\n        fee: feeTrx,\n        status: 'unsigned',\n        rawUnsigned: tx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async createTransaction(\n    from: string | number, to: string | number, amountTrx: string, options: CreateTransactionOptions = {}\n  ): Promise<TronUnsignedTransaction> {\n    try {\n      const {\n        fromAddress, fromIndex, toAddress, toIndex\n      } = await this.resolveFromTo(from, to)\n      const feeSun = options.fee || TRX_FEE_FOR_TRANSFER_SUN\n      const feeTrx = toMainDenomination(feeSun)\n      const balanceSun = await this.tronweb.trx.getBalance(fromAddress)\n      const balanceTrx = toMainDenomination(balanceSun)\n      const amountSun = toBaseDenominationNumber(amountTrx)\n      if ((balanceSun - feeSun) < amountSun) {\n        throw new Error(`Insufficient balance (${balanceTrx}) to send including fee of ${feeTrx}`)\n      }\n      const tx = await this.tronweb.transactionBuilder.sendTrx(toAddress, amountSun, fromAddress)\n      return {\n        id: tx.txID,\n        from: fromAddress,\n        to: toAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        amount: amountTrx,\n        fee: feeTrx,\n        status: 'unsigned',\n        rawUnsigned: tx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async signTransaction(\n    unsignedTx: TronUnsignedTransaction,\n  ): Promise<TronSignedTransaction> {\n    try {\n      const fromPrivateKey = await this.getPrivateKey(unsignedTx.fromIndex)\n      const unsignedRaw = cloneDeep(unsignedTx.rawUnsigned) as TronWebTransaction // tron modifies unsigned object\n      const signedTx = await this.tronweb.trx.sign(unsignedRaw, fromPrivateKey)\n      return {\n        ...unsignedTx,\n        status: 'signed',\n        rawSigned: signedTx,\n      }\n    } catch(e) {\n      throw toError(e)\n    }\n  }\n\n  async broadcastTransaction(tx: TronSignedTransaction): Promise<TronBroadcastResult> {\n    /*\n     * I’ve discovered that tron nodes like to “remember” every transaction you give it.\n     * If you try broadcasting an invalid TX the first time you’ll get a `SIGERROR` but\n     * every subsequent broadcast gives a `DUP_TRANSACTION_ERROR`. Which is the exact same\n     * error you get after rebroadcasting a valid transaction. And to make things worse,\n     * if you try to look up the invalid transaction by ID it tells you `Transaction not found`.\n     * So in order to actually determine the status of a broadcast the logic becomes:\n     * `success status` -> broadcast succeeded\n     * `error status` -> broadcast failed\n     * `(DUP_TRANSACTION_ERROR && Transaction found)` -> tx already broadcast\n     * `(DUP_TRANASCTION_ERROR && Transaction not found)` -> tx was probably invalid? Maybe? Who knows…\n     */\n    try {\n      const status = await this.tronweb.trx.sendRawTransaction(tx.rawSigned as TronWebTransaction)\n      let success = false\n      let rebroadcast = false\n      if (status.result || status.code === 'SUCCESS') {\n        success = true\n      } else {\n        try {\n          await this.tronweb.trx.getTransaction(tx.id)\n          success = true\n          rebroadcast = true\n        } catch (e) {}\n      }\n      if (success) {\n        return {\n          id: tx.id,\n          rebroadcast,\n        }\n      } else {\n        let statusCode: string | undefined = status.code\n        if (status.code === 'DUP_TRANSACTION_ERROR') {\n          statusCode = 'DUP_TX_BUT_TX_NOT_FOUND_SO_PROBABLY_INVALID_TX_ERROR'\n        }\n        throw new Error(`Failed to broadcast transaction: ${status.code}`)\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async getTransactionInfo(txid: string): Promise<TronTransactionInfo> {\n    try {\n      const [tx, txInfo, currentBlock] = await Promise.all([\n        this.tronweb.trx.getTransaction(txid),\n        this.tronweb.trx.getTransactionInfo(txid),\n        this.tronweb.trx.getCurrentBlock(),\n      ])\n\n      const { amountTrx, from, to } = this.extractTxFields(tx)\n\n      const [fromIndex, toIndex] = await Promise.all([\n        this.getAddressIndexOrNull(from),\n        this.getAddressIndexOrNull(to),\n      ])\n\n      const contractRet = get(tx, 'ret[0].contractRet')\n      const isExecuted = contractRet === 'SUCCESS'\n\n      const block = txInfo.blockNumber\n      const feeTrx = toMainDenomination(txInfo.fee || 0)\n\n      const currentBlockNumber = get(currentBlock, 'block_header.raw_data.number', 0)\n      const confirmations = currentBlockNumber && block ? currentBlockNumber - block : 0\n      const isConfirmed = confirmations > 0\n\n      const date = new Date(tx.raw_data.timestamp)\n\n      let status: TransactionStatus = TransactionStatus.Pending\n      if (isConfirmed) {\n        if (!isExecuted) {\n          status = TransactionStatus.Failed\n        }\n        status = TransactionStatus.Confirmed\n      }\n\n      return {\n        id: tx.txID,\n        amount: amountTrx,\n        to,\n        from,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        block,\n        fee: feeTrx,\n        isExecuted,\n        isConfirmed,\n        confirmations,\n        date,\n        status,\n        rawInfo: {\n          ...tx,\n          ...txInfo,\n          currentBlock: pick(currentBlock, 'block_header', 'blockID'),\n        }\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  // HELPERS\n\n  private canSweepBalance(balanceSun: number): boolean {\n    return (balanceSun - TRX_FEE_FOR_TRANSFER_SUN) > 0\n  }\n\n  private extractTxFields(tx: TronTransaction) {\n    const contractParam = get(tx, 'raw_data.contract[0].parameter.value')\n    if (!(contractParam && typeof contractParam.amount === 'number')) {\n      throw new Error('Unable to get transaction')\n    }\n\n    const amountSun = contractParam.amount || 0\n    const amountTrx = toMainDenomination(amountSun)\n    const to = this.tronweb.address.fromHex(contractParam.to_address)\n    const from = this.tronweb.address.fromHex(contractParam.owner_address)\n    return {\n      amountTrx,\n      amountSun,\n      to,\n      from,\n    }\n  }\n\n  async resolveAddress(addressOrIndex: string | number): Promise<string> {\n    if (typeof addressOrIndex === 'number') {\n      return this.getAddress(addressOrIndex)\n    } else {\n      if (!this.isValidAddress(addressOrIndex)) {\n        throw new Error(`Invalid TRON address: ${addressOrIndex}`)\n      }\n      return addressOrIndex\n    }\n  }\n\n  async resolveFromTo(from: string | number, to: string | number): Promise<{\n    fromIndex: number, fromAddress: string,\n    toIndex: number | null, toAddress: string,\n  }> {\n    const fromIndex = typeof from === 'string'\n      ? await this.getAddressIndex(from)\n      : from\n    return {\n      fromAddress: await this.resolveAddress(from),\n      fromIndex,\n      toAddress: await this.resolveAddress(to),\n      toIndex: typeof to === 'string'\n        ? await this.getAddressIndexOrNull(to)\n        : to,\n    }\n  }\n}\n\nexport default BaseTronPayments\n","import { set, get } from 'lodash'\n\n/**\n * Caches all addresses and indices derived from xpubs. Keeping this a module level variable allows\n * multiple instances of TronPayments using the same xpub to share cached values. We could use a\n * real lru cache here but even if we cached 1,000,000 addresses we'd only use ~150 MB of memory.\n *\n * 2 entries * (34 chars in address * 2 bytes per char + 8 bytes per number) = 152 bytes per address\n * 1000000 addresses * 152 bytes = 152 MB\n */\nexport class Bip44Cache {\n  store: {\n    [xpub: string]: {\n      addresses: { [index: number]: string },\n      indices: { [address: string]: number },\n    }\n  } = {}\n\n  put(xpub: string, index: number, address: string): void {\n    set(this.store, [xpub, 'addresses', index], address)\n    set(this.store, [xpub, 'indices', address], index)\n  }\n\n  lookupIndex(xpub: string, address: string): number | undefined {\n    return get(this.store, [xpub, 'indices', address])\n  }\n\n  lookupAddress(xpub: string, index: number): string | undefined {\n    return get(this.store, [xpub, 'addresses', index])\n  }\n}\n\nexport default Bip44Cache\n","// Borrowed from tronWeb\n// https://github.com/tronprotocol/tron-web/blob/master/src/utils/base58.js\n\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\nconst ALPHABET_MAP: { [c: string]: number } = {}\n\nfor (let i = 0; i < ALPHABET.length; i++) {\n  ALPHABET_MAP[ALPHABET.charAt(i)] = i\n}\n\nconst BASE = 58\n\nexport function encode58(buffer: Buffer | number[]) {\n  if (buffer.length === 0) {\n    return ''\n  }\n\n  let i\n  let j\n\n  const digits = [0]\n\n  for (i = 0; i < buffer.length; i++) {\n    for (j = 0; j < digits.length; j++) {\n      digits[j] <<= 8\n    }\n\n    digits[0] += buffer[i]\n    let carry = 0\n\n    for (j = 0; j < digits.length; ++j) {\n      digits[j] += carry\n      carry = (digits[j] / BASE) | 0\n      digits[j] %= BASE\n    }\n\n    while (carry) {\n      digits.push(carry % BASE)\n      carry = (carry / BASE) | 0\n    }\n  }\n\n  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {\n    digits.push(0)\n  }\n\n  return digits.reverse().map(digit => ALPHABET[digit]).join('')\n}\n\nexport function decode58(s: string): number[] {\n  if (s.length === 0) {\n    return []\n  }\n\n  let i\n  let j\n\n  const bytes = [0]\n\n  for (i = 0; i < s.length; i++) {\n    const c = s[i]\n\n    if (!(c in ALPHABET_MAP)) {\n      throw new Error('Non-base58 character')\n    }\n\n    for (j = 0; j < bytes.length; j++) {\n      bytes[j] *= BASE\n    }\n\n    bytes[0] += ALPHABET_MAP[c]\n    let carry = 0\n\n    for (j = 0; j < bytes.length; ++j) {\n      bytes[j] += carry\n      carry = bytes[j] >> 8\n      bytes[j] &= 0xff\n    }\n\n    while (carry) {\n      bytes.push(carry & 0xff)\n      carry >>= 8\n    }\n  }\n\n  for (i = 0; s[i] === '1' && i < s.length - 1; i++) {\n    bytes.push(0)\n  }\n\n  return bytes.reverse()\n}\n","// Many parts of this code are snippets from tronWeb:\n// https://github.com/tronprotocol/tron-web/blob/master/src/index.js\n\nimport { HDPrivateKey, HDPublicKey } from 'bitcore-lib'\nimport { keccak256 } from 'js-sha3'\nimport jsSHA from 'jssha'\nimport { ec as EC } from 'elliptic'\n\nimport { encode58 } from './base58'\n\nconst ec = new EC('secp256k1')\n\nexport const derivationPath = \"m/44'/195'/0\"\nconst derivationPathParts = derivationPath.split('/').slice(1)\n\ntype HDKey<K> = {\n  depth: number,\n  derive: (path: string | number, hardened?: boolean) => K,\n}\n\nexport function deriveAddress(xpub: string, index: number): string {\n  const key = new HDPublicKey(xpub)\n  const derived = deriveBasePath(key).derive(index)\n  return hdPublicKeyToAddress(derived)\n}\n\nexport function derivePrivateKey(xprv: string, index: number): string {\n  const key = new HDPrivateKey(xprv)\n  const derived = deriveBasePath(key).derive(index)\n  return hdPrivateKeyToPrivateKey(derived)\n}\n\nexport function xprvToXpub(xprv: string | HDPrivateKey): string {\n  const key = xprv instanceof HDPrivateKey ? xprv : new HDPrivateKey(xprv)\n  const derivedPubKey = deriveBasePath(key).hdPublicKey\n  return derivedPubKey.toString()\n}\n\n// HELPER FUNCTIONS\n\nfunction deriveBasePath<K extends HDKey<K>>(key: K): K {\n  const parts = derivationPathParts.slice(key.depth)\n  if (parts.length > 0) {\n    return key.derive(`m/${parts.join('/')}`)\n  }\n  return key\n}\n\nfunction hdPublicKeyToAddress(key: HDPublicKey): string {\n  return addressBytesToB58CheckAddress(pubBytesToTronBytes(bip32PublicToTronPublic(key.publicKey.toBuffer())))\n}\n\nfunction hdPrivateKeyToPrivateKey(key: HDPrivateKey): string {\n  return bip32PrivateToTronPrivate(key.privateKey.toBuffer())\n}\n\nfunction bip32PublicToTronPublic (pubKey: any): number[] {\n  const pubkey = ec.keyFromPublic(pubKey).getPublic()\n  const x = pubkey.x\n  const y = pubkey.y\n\n  let xHex = x.toString('hex')\n\n  while (xHex.length < 64) {\n    xHex = `0${xHex}`\n  }\n\n  let yHex = y.toString('hex')\n\n  while (yHex.length < 64) {\n    yHex = `0${yHex}`\n  }\n\n  const pubkeyHex = `04${xHex}${yHex}`\n  const pubkeyBytes = hexStr2byteArray(pubkeyHex)\n\n  return pubkeyBytes\n}\n\nfunction bip32PrivateToTronPrivate(priKeyBytes: Buffer): string {\n  const key = ec.keyFromPrivate(priKeyBytes, 'bytes')\n  const privkey = key.getPrivate() as Buffer\n  let priKeyHex = privkey.toString('hex')\n  while (priKeyHex.length < 64) {\n    priKeyHex = `0${priKeyHex}`\n  }\n  let privArray = hexStr2byteArray(priKeyHex)\n  return byteArray2hexStr(privArray)\n}\n\n// Borrowed from tronweb:  https://github.com/tronprotocol/tron-web/blob/master/src/utils/code.js\nconst ADDRESS_PREFIX = '41'\nfunction byte2hexStr (byte: number): string {\n  const hexByteMap = '0123456789ABCDEF'\n\n  let str = ''\n  str += hexByteMap.charAt(byte >> 4)\n  str += hexByteMap.charAt(byte & 0x0f)\n\n  return str\n}\n\nfunction hexStr2byteArray (str: string): number[] {\n  const byteArray = Array()\n  let d = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i)\n\n    if (isHexChar(c)) {\n      d <<= 4\n      d += hexChar2byte(c)\n      j++\n\n      if (0 === (j % 2)) {\n        byteArray[k++] = d\n        d = 0\n      }\n    }\n  }\n\n  return byteArray\n}\n\nfunction isHexChar (c: string): boolean {\n  return ((c >= 'A' && c <= 'F') ||\n    (c >= 'a' && c <= 'f') ||\n    (c >= '0' && c <= '9'))\n}\n\nfunction hexChar2byte (c: string): number {\n  let d = 0\n\n  if (c >= 'A' && c <= 'F') {\n    d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10\n  } else if (c >= 'a' && c <= 'f') {\n    d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10\n  } else if (c >= '0' && c <= '9') {\n    d = c.charCodeAt(0) - '0'.charCodeAt(0)\n  }\n\n  return d\n}\n\nfunction byteArray2hexStr (byteArray: number[]): string {\n  let str = ''\n\n  for (let i = 0; i < (byteArray.length); i++) {\n    str += byte2hexStr(byteArray[i])\n  }\n  return str\n}\n\nfunction pubBytesToTronBytes (pubBytes: number[]): number[] {\n  if (pubBytes.length === 65) {\n    pubBytes = pubBytes.slice(1)\n  }\n\n  const hash = keccak256(pubBytes).toString()\n  const addressHex = ADDRESS_PREFIX + hash.substring(24)\n\n  return hexStr2byteArray(addressHex)\n}\n\nfunction addressBytesToB58CheckAddress (addressBytes: number[]) {\n  const hash0 = SHA256(addressBytes)\n  const hash1 = SHA256(hash0)\n  let checkSum = hash1.slice(0, 4)\n  checkSum = addressBytes.concat(checkSum)\n  return encode58(checkSum)\n}\n\nfunction SHA256 (msgBytes: number[]): number[] {\n  const shaObj = new jsSHA('SHA-256', 'HEX')\n  const msgHex = byteArray2hexStr(msgBytes)\n  shaObj.update(msgHex)\n  const hashHex = shaObj.getHash('HEX')\n  return hexStr2byteArray(hashHex)\n}\n","import { set, get } from 'lodash'\nimport { HDPrivateKey } from 'bitcore-lib'\n\nimport { BaseTronPayments } from './BaseTronPayments'\nimport Bip44Cache from './Bip44Cache'\nimport { GetAddressOptions, HdTronPaymentsConfig } from './types'\nimport { deriveAddress, derivePrivateKey, xprvToXpub } from './bip44'\nimport { DEFAULT_MAX_ADDRESS_SCAN } from './constants'\nimport { isValidXpub, isValidXprv } from './utils'\n\nconst xpubCache = new Bip44Cache()\n\nexport class HdTronPayments extends BaseTronPayments {\n\n  hdKey: string\n  maxAddressScan: number\n\n  constructor(config: HdTronPaymentsConfig) {\n    super(config)\n    this.hdKey = config.hdKey\n    this.maxAddressScan = config.maxAddressScan || DEFAULT_MAX_ADDRESS_SCAN\n    if (!(isValidXprv(this.hdKey) || isValidXpub(this.hdKey))) {\n      throw new Error('Account must be a valid xprv or xpub')\n    }\n\n  }\n\n  static generateNewKeys() {\n    const key = new HDPrivateKey()\n    const xprv = key.toString()\n    const xpub = xprvToXpub(xprv)\n    return {\n      xprv,\n      xpub,\n    }\n  }\n\n  getXpub(): string {\n    return isValidXprv(this.hdKey)\n      ? xprvToXpub(this.hdKey)\n      : this.hdKey\n  }\n\n  async getAddress(index: number, options: GetAddressOptions = {}): Promise<string> {\n    const cacheIndex = options.cacheIndex || true\n    // this.account is an xprv or xpub\n    const xpub = this.getXpub()\n    const address = deriveAddress(xpub, index)\n    if (!this.isValidAddress(address)) {\n      // This should never happen\n      throw new Error(`Cannot get address ${index} - validation failed for derived address`)\n    }\n    if (cacheIndex) {\n      xpubCache.put(xpub, index, address)\n    }\n    return address\n  }\n\n  async getAddressIndex(address: string): Promise<number> {\n    const xpub = this.getXpub()\n    const cachedIndex = xpubCache.lookupIndex(xpub, address)\n    if (cachedIndex) {\n      return cachedIndex\n    }\n    for (let i = 0; i < this.maxAddressScan; i++) {\n      if (address === deriveAddress(xpub, i)) {\n        xpubCache.put(xpub, i, address)\n        return i\n      }\n    }\n    throw new Error('Cannot get index of address after checking cache and scanning addresses'\n      + ` from 0 to ${this.maxAddressScan - 1} (address=${address})`)\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    if (!isValidXprv(this.hdKey)) {\n      throw new Error(`Cannot get private key ${index} - account is not a valid xprv)`)\n    }\n    return derivePrivateKey(this.hdKey, index)\n  }\n\n}\n\nexport default HdTronPayments\n","import { set, get } from 'lodash'\n\nimport { BaseTronPayments } from './BaseTronPayments'\nimport { KeyPairTronPaymentsConfig } from './types'\n\nexport class KeyPairTronPayments extends BaseTronPayments {\n\n  addresses: { [index: number]: string | undefined } = {}\n  privateKeys: { [index: number]: string | null | undefined } = {}\n  addressIndices: { [address: string]: number | undefined } = {}\n\n  constructor(config: KeyPairTronPaymentsConfig) {\n    super(config)\n    Object.entries(config.keyPairs).forEach(([iString, addressOrKey]) => {\n      if (typeof addressOrKey === 'undefined' || addressOrKey === null) {\n        return\n      }\n      const i = Number.parseInt(iString)\n      if (this.isValidAddress(addressOrKey)) {\n        this.addresses[i] = addressOrKey\n        this.privateKeys[i] = null\n        this.addressIndices[addressOrKey] = i\n        return\n      }\n      if (this.isValidPrivateKey(addressOrKey)) {\n        const address = this.privateKeyToAddress(addressOrKey)\n        this.addresses[i] = address\n        this.privateKeys[i] = addressOrKey\n        this.addressIndices[address] = i\n        return\n      }\n      throw new Error(`keyPairs[${i}] is not a valid private key or address`)\n    })\n  }\n\n  async getAddress(index: number): Promise<string> {\n    const address = this.addresses[index]\n    if (typeof address === 'undefined') {\n      throw new Error(`Cannot get address ${index} - keyPair[${index}] is undefined`)\n    }\n    return address\n  }\n\n  async getAddressIndex(address: string): Promise<number> {\n    const index = this.addressIndices[address]\n    if (typeof index === 'undefined') {\n      throw new Error(`Cannot get index of address ${address}`)\n    }\n    return index\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    const privateKey = this.privateKeys[index]\n    if (typeof privateKey === 'undefined') {\n      throw new Error(`Cannot get private key ${index} - keyPair[${index}] is undefined`)\n    }\n    if (privateKey === null) {\n      throw new Error(`Cannot get private key ${index} - keyPair[${index}] is a public address`)\n    }\n    return privateKey\n  }\n}\n\nexport default KeyPairTronPayments\n","import { PaymentsFactory } from 'payments-common'\n\nimport { TronPaymentsConfig, HdTronPaymentsConfig, KeyPairTronPaymentsConfig } from './types'\nimport { HdTronPayments } from './HdTronPayments'\nimport { KeyPairTronPayments } from './KeyPairTronPayments'\nimport BaseTronPayments from './BaseTronPayments'\n\nexport class TronPaymentsFactory implements PaymentsFactory<BaseTronPayments> {\n\n  forConfig(config: TronPaymentsConfig) {\n    if ((config as HdTronPaymentsConfig).hdKey) {\n      return new HdTronPayments(config as HdTronPaymentsConfig)\n    }\n    if ((config as KeyPairTronPaymentsConfig).keyPairs) {\n      return new KeyPairTronPayments(config as KeyPairTronPaymentsConfig)\n    }\n    throw new Error('Cannot instantiate tron payments for unsupported config')\n  }\n\n}\n\nexport default TronPaymentsFactory\n","import * as t from 'io-ts'\nimport {\n  BaseTransactionInfo, BaseUnsignedTransaction, BaseSignedTransaction, BaseBroadcastResult, extend,\n} from 'payments-common'\nimport {\n  Transaction as TronWebTransaction,\n  TransactionInfo as TronWebTransactionInfo,\n  Block as TronWebBlock\n} from 'tronweb'\n\nexport { TronWebTransaction, TronWebTransactionInfo, TronWebBlock }\n\nexport type TransactionInfoRaw = TronWebTransaction & TronWebTransactionInfo & {\n  currentBlock: Pick<TronWebBlock, 'blockID' | 'block_header'>\n}\n\nexport const BaseTronPaymentsConfig = t.partial({\n  fullNode: t.string,\n  solidityNode: t.string,\n  eventServer: t.string,\n}, 'BaseTronPaymentsConfig')\nexport type BaseTronPaymentsConfig = t.TypeOf<typeof BaseTronPaymentsConfig>\n\nexport const HdTronPaymentsConfig = extend(\n  BaseTronPaymentsConfig,\n  { // required\n    hdKey: t.string, // xprv or xpub\n  },\n  { // optional\n    maxAddressScan: t.number, // max address scan to find address index in getAddressIndex\n  },\n  'HdTronPaymentsConfig',\n)\nexport type HdTronPaymentsConfig = t.TypeOf<typeof HdTronPaymentsConfig>\n\nexport const KeyPairTronPaymentsConfig = extend(\n  BaseTronPaymentsConfig,\n  {\n    // can be private keys or addresses\n    keyPairs: t.union([\n      t.array(t.union([t.string, t.null, t.undefined])),\n      t.record(t.number, t.string),\n    ]),\n  },\n  {},\n  'KeyPairTronPaymentsConfig',\n)\nexport type KeyPairTronPaymentsConfig = t.TypeOf<typeof KeyPairTronPaymentsConfig>\n\nexport const TronPaymentsConfig = t.union([HdTronPaymentsConfig, KeyPairTronPaymentsConfig])\nexport type TronPaymentsConfig = t.TypeOf<typeof TronPaymentsConfig>\n\nexport const TronUnsignedTransaction = extend(\n  BaseUnsignedTransaction,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n  },\n  {},\n  'TronUnsignedTransaction',\n)\nexport type TronUnsignedTransaction = t.TypeOf<typeof TronUnsignedTransaction>\n\nexport const TronSignedTransaction = extend(\n  BaseSignedTransaction,\n  {},\n  {},\n  'TronSignedTransaction',\n)\nexport type TronSignedTransaction = t.TypeOf<typeof TronSignedTransaction>\n\nexport const TronTransactionInfo = extend(\n  BaseTransactionInfo,\n  {\n    from: t.string,\n    to: t.string,\n  },\n  {},\n  'TronTransactionInfo',\n)\nexport type TronTransactionInfo = t.TypeOf<typeof TronTransactionInfo>\n\nexport const TronBroadcastResult = extend(\n  BaseBroadcastResult,\n  {\n    rebroadcast: t.boolean,\n  },\n  {},\n  'TronBroadcastResult',\n)\nexport type TronBroadcastResult = t.TypeOf<typeof TronBroadcastResult>\n\nexport const CreateTransactionOptions = t.partial({\n  fee: t.number, // in sun\n})\nexport type CreateTransactionOptions = t.TypeOf<typeof CreateTransactionOptions>\n\nexport const GetAddressOptions = t.partial({\n  cacheIndex: t.boolean,\n})\nexport type GetAddressOptions = t.TypeOf<typeof GetAddressOptions>\n"],"names":["cloneDeep","get","TransactionStatus","pick","set","EC","HDPublicKey","HDPrivateKey","keccak256","tslib_1.__extends","t.partial","t.string","extend","t.number","t.union","t.array","t.null","t.undefined","t.record","BaseUnsignedTransaction","BaseSignedTransaction","BaseTransactionInfo","BaseBroadcastResult","t.boolean"],"mappings":"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"}