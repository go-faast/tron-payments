{"version":3,"file":"index.umd.js","sources":["../src/utils.ts","../src/constants.ts","../src/BaseTronPayments.ts","../src/Bip44Cache.ts","../src/base58.ts","../src/bip44.ts","../src/HdTronPayments.ts","../src/KeyPairTronPayments.ts","../src/TronPaymentsFactory.ts","../src/types.ts"],"sourcesContent":["/** Converts strings to Error */\nexport function toError(e: any): any {\n  if (typeof e === 'string') {\n    return new Error(e)\n  }\n  return e\n}\n\nexport function toMainDenominationNumber(amountSun: number | string): number {\n  const baseUnits = typeof amountSun === 'number' ? amountSun : Number.parseInt(amountSun)\n  if (Number.isNaN(baseUnits)) {\n    throw new Error('Cannot convert to main denomination - not a number')\n  }\n  if (!Number.isFinite(baseUnits)) {\n    throw new Error('Cannot convert to main denomination - not finite')\n  }\n  return baseUnits / 1e6\n}\n\nexport function toMainDenomination(amountSun: number | string): string {\n  return toMainDenominationNumber(amountSun).toString()\n}\n\nexport function toBaseDenominationNumber(amountTrx: number | string): number {\n  const mainUnits = typeof amountTrx === 'number' ? amountTrx : Number.parseFloat(amountTrx)\n  if (Number.isNaN(mainUnits)) {\n    throw new Error('Cannot convert to base denomination - not a number')\n  }\n  if (!Number.isFinite(mainUnits)) {\n    throw new Error('Cannot convert to base denomination - not finite')\n  }\n  return Math.floor(mainUnits * 1e6)\n}\n\nexport function toBaseDenomination(amountTrx: number | string): string {\n  return toBaseDenominationNumber(amountTrx).toString()\n}\n\nexport function isValidXprv(xprv: string): boolean {\n  return xprv.startsWith('xprv')\n}\n\nexport function isValidXpub(xpub: string): boolean {\n  return xpub.startsWith('xpub')\n}\n","import { FeeLevel } from '@faast/payments-common'\n\nexport const FEE_FOR_TRANSFER_SUN = 100000\nexport const FEE_LEVEL_TRANSFER_SUN = {\n  [FeeLevel.Low]: FEE_FOR_TRANSFER_SUN,\n  [FeeLevel.Medium]: FEE_FOR_TRANSFER_SUN,\n  [FeeLevel.High]: FEE_FOR_TRANSFER_SUN,\n}\n\nexport const DEFAULT_FULL_NODE = process.env.TRX_FULL_NODE_URL || 'http://54.236.37.243:8090'\nexport const DEFAULT_SOLIDITY_NODE = process.env.TRX_SOLIDITY_NODE_URL || 'http://47.89.187.247:8091'\nexport const DEFAULT_EVENT_SERVER = process.env.TRX_EVENT_SERVER_URL || 'https://api.trongrid.io'\nexport const DEFAULT_MAX_ADDRESS_SCAN = 10\n","import TronWeb, { Transaction as TronTransaction } from 'tronweb'\nimport { pick, get, cloneDeep } from 'lodash'\nimport {\n  BalanceResult,\n  PaymentsInterface,\n  TransactionStatus,\n  FeeLevel,\n  FeeOption,\n  FeeRateType,\n  FeeOptionCustom,\n  ResolvedFeeOption,\n} from '@faast/payments-common'\nimport { isType } from '@faast/ts-common'\n\nimport {\n  TronTransactionInfo,\n  TronUnsignedTransaction,\n  TronSignedTransaction,\n  TronBroadcastResult,\n  CreateTransactionOptions,\n  GetAddressOptions,\n  BaseTronPaymentsConfig,\n  TronWebTransaction,\n} from './types'\nimport { toMainDenomination, toBaseDenomination, toBaseDenominationNumber, toError } from './utils'\nimport {\n  FEE_LEVEL_TRANSFER_SUN,\n  DEFAULT_FULL_NODE,\n  DEFAULT_EVENT_SERVER,\n  DEFAULT_SOLIDITY_NODE,\n  FEE_FOR_TRANSFER_SUN,\n} from './constants'\n\nexport abstract class BaseTronPayments<Config extends BaseTronPaymentsConfig>\n  implements\n    PaymentsInterface<\n      Config,\n      TronUnsignedTransaction,\n      TronSignedTransaction,\n      TronBroadcastResult,\n      TronTransactionInfo\n    > {\n  // You may notice that many function blocks are enclosed in a try/catch.\n  // I had to do this because tronweb thinks it's a good idea to throw\n  // strings instead of Errors and now we need to convert them all ourselves\n  // to be consistent.\n\n  fullNode: string\n  solidityNode: string\n  eventServer: string\n  tronweb: TronWeb\n\n  constructor(config: Config) {\n    this.fullNode = config.fullNode || DEFAULT_FULL_NODE\n    this.solidityNode = config.solidityNode || DEFAULT_SOLIDITY_NODE\n    this.eventServer = config.eventServer || DEFAULT_EVENT_SERVER\n\n    this.tronweb = new TronWeb(this.fullNode, this.solidityNode, this.eventServer)\n  }\n\n  static toMainDenomination = toMainDenomination\n  static toBaseDenomination = toBaseDenomination\n  toMainDenomination = toMainDenomination\n  toBaseDenomination = toBaseDenomination\n\n  isValidAddress(address: string): boolean {\n    return this.tronweb.isAddress(address)\n  }\n\n  isValidPrivateKey(privateKey: string): boolean {\n    try {\n      this.privateKeyToAddress(privateKey)\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n\n  privateKeyToAddress(privateKey: string): string {\n    const address = this.tronweb.address.fromPrivateKey(privateKey)\n    if (this.isValidAddress(address)) {\n      return address\n    } else {\n      throw new Error('Validation failed for address derived from private key')\n    }\n  }\n\n  abstract getFullConfig(): Config\n  abstract getPublicConfig(): Config\n  abstract getAccountId(index: number): string\n  abstract getAccountIds(): string[]\n  abstract async getAddress(index: number, options?: GetAddressOptions): Promise<string>\n  abstract async getAddressIndex(address: string): Promise<number>\n  abstract async getPrivateKey(index: number): Promise<string>\n\n  async getAddressOrNull(index: number, options?: GetAddressOptions): Promise<string | null> {\n    try {\n      return await this.getAddress(index, options)\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getAddressIndexOrNull(address: string): Promise<number | null> {\n    try {\n      return await this.getAddressIndex(address)\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getBalance(addressOrIndex: string | number): Promise<BalanceResult> {\n    try {\n      const address = await this.resolveAddress(addressOrIndex)\n      const balanceSun = await this.tronweb.trx.getBalance(address)\n      return {\n        balance: toMainDenomination(balanceSun).toString(),\n        unconfirmedBalance: '0',\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async canSweep(addressOrIndex: string | number): Promise<boolean> {\n    const { balance } = await this.getBalance(addressOrIndex)\n    return this.canSweepBalance(toBaseDenominationNumber(balance))\n  }\n\n  async resolveFeeOption(feeOption: FeeOption): Promise<ResolvedFeeOption> {\n    let targetFeeLevel: FeeLevel\n    let targetFeeRate: string\n    let targetFeeRateType: FeeRateType\n    let feeBase: string\n    if (isType(FeeOptionCustom, feeOption)) {\n      targetFeeLevel = FeeLevel.Custom\n      targetFeeRate = feeOption.feeRate\n      targetFeeRateType = feeOption.feeRateType\n      if (feeOption.feeRateType === FeeRateType.Base) {\n        feeBase = feeOption.feeRate\n      } else if (feeOption.feeRateType === FeeRateType.Main) {\n        feeBase = toBaseDenomination(feeOption.feeRate)\n      } else {\n        throw new Error(`Unsupported feeRateType for TRX: ${feeOption.feeRateType}`)\n      }\n    } else {\n      feeBase = FEE_LEVEL_TRANSFER_SUN[feeOption.feeLevel].toString()\n      targetFeeLevel = feeOption.feeLevel\n      targetFeeRate = feeBase\n      targetFeeRateType = FeeRateType.Base\n    }\n    const feeMain = toMainDenomination(feeBase)\n    return {\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      feeBase,\n      feeMain,\n    }\n  }\n\n  async createSweepTransaction(\n    from: string | number,\n    to: string | number,\n    options: CreateTransactionOptions = { feeLevel: FeeLevel.Medium },\n  ): Promise<TronUnsignedTransaction> {\n    try {\n      const { fromAddress, fromIndex, toAddress, toIndex } = await this.resolveFromTo(from, to)\n      const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeBase, feeMain } = await this.resolveFeeOption(\n        options,\n      )\n      const feeSun = Number.parseInt(feeBase)\n      const balanceSun = await this.tronweb.trx.getBalance(fromAddress)\n      const balanceTrx = toMainDenomination(balanceSun)\n      if (!this.canSweepBalance(balanceSun)) {\n        throw new Error(`Insufficient balance (${balanceTrx}) to sweep with fee of ${feeMain}`)\n      }\n      const amountSun = balanceSun - feeSun\n      const amountTrx = toMainDenomination(amountSun)\n      const tx = await this.tronweb.transactionBuilder.sendTrx(toAddress, amountSun, fromAddress)\n      return {\n        id: tx.txID,\n        fromAddress,\n        toAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        amount: amountTrx,\n        fee: feeMain,\n        targetFeeLevel,\n        targetFeeRate,\n        targetFeeRateType,\n        status: 'unsigned',\n        data: tx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async createTransaction(\n    from: string | number,\n    to: string | number,\n    amountTrx: string,\n    options: CreateTransactionOptions = { feeLevel: FeeLevel.Medium },\n  ): Promise<TronUnsignedTransaction> {\n    try {\n      const { fromAddress, fromIndex, toAddress, toIndex } = await this.resolveFromTo(from, to)\n      const { targetFeeLevel, targetFeeRate, targetFeeRateType, feeBase, feeMain } = await this.resolveFeeOption(\n        options,\n      )\n      const feeSun = Number.parseInt(feeBase)\n      const balanceSun = await this.tronweb.trx.getBalance(fromAddress)\n      const balanceTrx = toMainDenomination(balanceSun)\n      const amountSun = toBaseDenominationNumber(amountTrx)\n      if (balanceSun - feeSun < amountSun) {\n        throw new Error(`Insufficient balance (${balanceTrx}) to send including fee of ${feeMain}`)\n      }\n      const tx = await this.tronweb.transactionBuilder.sendTrx(toAddress, amountSun, fromAddress)\n      return {\n        id: tx.txID,\n        fromAddress,\n        toAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        amount: amountTrx,\n        fee: feeMain,\n        targetFeeLevel,\n        targetFeeRate,\n        targetFeeRateType,\n        status: 'unsigned',\n        data: tx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async signTransaction(unsignedTx: TronUnsignedTransaction): Promise<TronSignedTransaction> {\n    try {\n      const fromPrivateKey = await this.getPrivateKey(unsignedTx.fromIndex)\n      const unsignedRaw = cloneDeep(unsignedTx.data) as TronWebTransaction // tron modifies unsigned object\n      const signedTx = await this.tronweb.trx.sign(unsignedRaw, fromPrivateKey)\n      return {\n        ...unsignedTx,\n        status: 'signed',\n        data: signedTx,\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async broadcastTransaction(tx: TronSignedTransaction): Promise<TronBroadcastResult> {\n    /*\n     * I’ve discovered that tron nodes like to “remember” every transaction you give it.\n     * If you try broadcasting an invalid TX the first time you’ll get a `SIGERROR` but\n     * every subsequent broadcast gives a `DUP_TRANSACTION_ERROR`. Which is the exact same\n     * error you get after rebroadcasting a valid transaction. And to make things worse,\n     * if you try to look up the invalid transaction by ID it tells you `Transaction not found`.\n     * So in order to actually determine the status of a broadcast the logic becomes:\n     * `success status` -> broadcast succeeded\n     * `error status` -> broadcast failed\n     * `(DUP_TRANSACTION_ERROR && Transaction found)` -> tx already broadcast\n     * `(DUP_TRANASCTION_ERROR && Transaction not found)` -> tx was probably invalid? Maybe? Who knows…\n     */\n    try {\n      const status = await this.tronweb.trx.sendRawTransaction(tx.data as TronWebTransaction)\n      let success = false\n      let rebroadcast = false\n      if (status.result || status.code === 'SUCCESS') {\n        success = true\n      } else {\n        try {\n          await this.tronweb.trx.getTransaction(tx.id)\n          success = true\n          rebroadcast = true\n        } catch (e) {}\n      }\n      if (success) {\n        return {\n          id: tx.id,\n          rebroadcast,\n        }\n      } else {\n        let statusCode: string | undefined = status.code\n        if (status.code === 'DUP_TRANSACTION_ERROR') {\n          statusCode = 'DUP_TX_BUT_TX_NOT_FOUND_SO_PROBABLY_INVALID_TX_ERROR'\n        }\n        throw new Error(`Failed to broadcast transaction: ${status.code}`)\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  async getTransactionInfo(txid: string): Promise<TronTransactionInfo> {\n    try {\n      const [tx, txInfo, currentBlock] = await Promise.all([\n        this.tronweb.trx.getTransaction(txid),\n        this.tronweb.trx.getTransactionInfo(txid),\n        this.tronweb.trx.getCurrentBlock(),\n      ])\n\n      const { amountTrx, fromAddress, toAddress } = this.extractTxFields(tx)\n\n      const [fromIndex, toIndex] = await Promise.all([\n        this.getAddressIndexOrNull(fromAddress),\n        this.getAddressIndexOrNull(toAddress),\n      ])\n\n      const contractRet = get(tx, 'ret[0].contractRet')\n      const isExecuted = contractRet === 'SUCCESS'\n\n      const block = txInfo.blockNumber\n      const feeTrx = toMainDenomination(txInfo.fee || 0)\n\n      const currentBlockNumber = get(currentBlock, 'block_header.raw_data.number', 0)\n      const confirmations = currentBlockNumber && block ? currentBlockNumber - block : 0\n      const isConfirmed = confirmations > 0\n\n      const date = new Date(tx.raw_data.timestamp)\n\n      let status: TransactionStatus = TransactionStatus.Pending\n      if (isConfirmed) {\n        if (!isExecuted) {\n          status = TransactionStatus.Failed\n        }\n        status = TransactionStatus.Confirmed\n      }\n\n      return {\n        id: tx.txID,\n        amount: amountTrx,\n        toAddress,\n        fromAddress,\n        toExtraId: null,\n        fromIndex,\n        toIndex,\n        block,\n        fee: feeTrx,\n        isExecuted,\n        isConfirmed,\n        confirmations,\n        date,\n        status,\n        data: {\n          ...tx,\n          ...txInfo,\n          currentBlock: pick(currentBlock, 'block_header', 'blockID'),\n        },\n      }\n    } catch (e) {\n      throw toError(e)\n    }\n  }\n\n  // HELPERS\n\n  private canSweepBalance(balanceSun: number): boolean {\n    return balanceSun - FEE_FOR_TRANSFER_SUN > 0\n  }\n\n  private extractTxFields(tx: TronTransaction) {\n    const contractParam = get(tx, 'raw_data.contract[0].parameter.value')\n    if (!(contractParam && typeof contractParam.amount === 'number')) {\n      throw new Error('Unable to get transaction')\n    }\n\n    const amountSun = contractParam.amount || 0\n    const amountTrx = toMainDenomination(amountSun)\n    const toAddress = this.tronweb.address.fromHex(contractParam.to_address)\n    const fromAddress = this.tronweb.address.fromHex(contractParam.owner_address)\n    return {\n      amountTrx,\n      amountSun,\n      toAddress,\n      fromAddress,\n    }\n  }\n\n  async resolveAddress(addressOrIndex: string | number): Promise<string> {\n    if (typeof addressOrIndex === 'number') {\n      return this.getAddress(addressOrIndex)\n    } else {\n      if (!this.isValidAddress(addressOrIndex)) {\n        throw new Error(`Invalid TRON address: ${addressOrIndex}`)\n      }\n      return addressOrIndex\n    }\n  }\n\n  async resolveFromTo(\n    from: string | number,\n    to: string | number,\n  ): Promise<{\n    fromIndex: number\n    fromAddress: string\n    toIndex: number | null\n    toAddress: string\n  }> {\n    const fromIndex = typeof from === 'string' ? await this.getAddressIndex(from) : from\n    return {\n      fromAddress: await this.resolveAddress(from),\n      fromIndex,\n      toAddress: await this.resolveAddress(to),\n      toIndex: typeof to === 'string' ? await this.getAddressIndexOrNull(to) : to,\n    }\n  }\n}\n\nexport default BaseTronPayments\n","import { set, get } from 'lodash'\n\n/**\n * Caches all addresses and indices derived from xpubs. Keeping this a module level variable allows\n * multiple instances of TronPayments using the same xpub to share cached values. We could use a\n * real lru cache here but even if we cached 1,000,000 addresses we'd only use ~150 MB of memory.\n *\n * 2 entries * (34 chars in address * 2 bytes per char + 8 bytes per number) = 152 bytes per address\n * 1000000 addresses * 152 bytes = 152 MB\n */\nexport class Bip44Cache {\n  store: {\n    [xpub: string]: {\n      addresses: { [index: number]: string }\n      indices: { [address: string]: number }\n    }\n  } = {}\n\n  put(xpub: string, index: number, address: string): void {\n    set(this.store, [xpub, 'addresses', index], address)\n    set(this.store, [xpub, 'indices', address], index)\n  }\n\n  lookupIndex(xpub: string, address: string): number | undefined {\n    return get(this.store, [xpub, 'indices', address])\n  }\n\n  lookupAddress(xpub: string, index: number): string | undefined {\n    return get(this.store, [xpub, 'addresses', index])\n  }\n}\n\nexport default Bip44Cache\n","// Borrowed from tronWeb\n// https://github.com/tronprotocol/tron-web/blob/master/src/utils/base58.js\n\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\nconst ALPHABET_MAP: { [c: string]: number } = {}\n\nfor (let i = 0; i < ALPHABET.length; i++) {\n  ALPHABET_MAP[ALPHABET.charAt(i)] = i\n}\n\nconst BASE = 58\n\nexport function encode58(buffer: Buffer | number[]) {\n  if (buffer.length === 0) {\n    return ''\n  }\n\n  let i\n  let j\n\n  const digits = [0]\n\n  for (i = 0; i < buffer.length; i++) {\n    for (j = 0; j < digits.length; j++) {\n      digits[j] <<= 8\n    }\n\n    digits[0] += buffer[i]\n    let carry = 0\n\n    for (j = 0; j < digits.length; ++j) {\n      digits[j] += carry\n      carry = (digits[j] / BASE) | 0\n      digits[j] %= BASE\n    }\n\n    while (carry) {\n      digits.push(carry % BASE)\n      carry = (carry / BASE) | 0\n    }\n  }\n\n  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {\n    digits.push(0)\n  }\n\n  return digits\n    .reverse()\n    .map(digit => ALPHABET[digit])\n    .join('')\n}\n\nexport function decode58(s: string): number[] {\n  if (s.length === 0) {\n    return []\n  }\n\n  let i\n  let j\n\n  const bytes = [0]\n\n  for (i = 0; i < s.length; i++) {\n    const c = s[i]\n\n    if (!(c in ALPHABET_MAP)) {\n      throw new Error('Non-base58 character')\n    }\n\n    for (j = 0; j < bytes.length; j++) {\n      bytes[j] *= BASE\n    }\n\n    bytes[0] += ALPHABET_MAP[c]\n    let carry = 0\n\n    for (j = 0; j < bytes.length; ++j) {\n      bytes[j] += carry\n      carry = bytes[j] >> 8\n      bytes[j] &= 0xff\n    }\n\n    while (carry) {\n      bytes.push(carry & 0xff)\n      carry >>= 8\n    }\n  }\n\n  for (i = 0; s[i] === '1' && i < s.length - 1; i++) {\n    bytes.push(0)\n  }\n\n  return bytes.reverse()\n}\n","// Many parts of this code are snippets from tronWeb:\n// https://github.com/tronprotocol/tron-web/blob/master/src/index.js\n\nimport { HDPrivateKey, HDPublicKey } from 'bitcore-lib'\nimport { keccak256 } from 'js-sha3'\nimport jsSHA from 'jssha'\nimport { ec as EC } from 'elliptic'\n\nimport { encode58 } from './base58'\n\nconst ec = new EC('secp256k1')\n\nexport const derivationPath = \"m/44'/195'/0\"\nconst derivationPathParts = derivationPath.split('/').slice(1)\n\ntype HDKey<K> = {\n  depth: number\n  derive: (path: string | number, hardened?: boolean) => K\n}\n\nexport function deriveAddress(xpub: string, index: number): string {\n  const key = new HDPublicKey(xpub)\n  const derived = deriveBasePath(key).derive(index)\n  return hdPublicKeyToAddress(derived)\n}\n\nexport function derivePrivateKey(xprv: string, index: number): string {\n  const key = new HDPrivateKey(xprv)\n  const derived = deriveBasePath(key).derive(index)\n  return hdPrivateKeyToPrivateKey(derived)\n}\n\nexport function xprvToXpub(xprv: string | HDPrivateKey): string {\n  const key = xprv instanceof HDPrivateKey ? xprv : new HDPrivateKey(xprv)\n  const derivedPubKey = deriveBasePath(key).hdPublicKey\n  return derivedPubKey.toString()\n}\n\n// HELPER FUNCTIONS\n\nfunction deriveBasePath<K extends HDKey<K>>(key: K): K {\n  const parts = derivationPathParts.slice(key.depth)\n  if (parts.length > 0) {\n    return key.derive(`m/${parts.join('/')}`)\n  }\n  return key\n}\n\nfunction hdPublicKeyToAddress(key: HDPublicKey): string {\n  return addressBytesToB58CheckAddress(pubBytesToTronBytes(bip32PublicToTronPublic(key.publicKey.toBuffer())))\n}\n\nfunction hdPrivateKeyToPrivateKey(key: HDPrivateKey): string {\n  return bip32PrivateToTronPrivate(key.privateKey.toBuffer())\n}\n\nfunction bip32PublicToTronPublic(pubKey: any): number[] {\n  const pubkey = ec.keyFromPublic(pubKey).getPublic()\n  const x = pubkey.x\n  const y = pubkey.y\n\n  let xHex = x.toString('hex')\n\n  while (xHex.length < 64) {\n    xHex = `0${xHex}`\n  }\n\n  let yHex = y.toString('hex')\n\n  while (yHex.length < 64) {\n    yHex = `0${yHex}`\n  }\n\n  const pubkeyHex = `04${xHex}${yHex}`\n  const pubkeyBytes = hexStr2byteArray(pubkeyHex)\n\n  return pubkeyBytes\n}\n\nfunction bip32PrivateToTronPrivate(priKeyBytes: Buffer): string {\n  const key = ec.keyFromPrivate(priKeyBytes, 'bytes')\n  const privkey = key.getPrivate() as Buffer\n  let priKeyHex = privkey.toString('hex')\n  while (priKeyHex.length < 64) {\n    priKeyHex = `0${priKeyHex}`\n  }\n  let privArray = hexStr2byteArray(priKeyHex)\n  return byteArray2hexStr(privArray)\n}\n\n// Borrowed from tronweb:  https://github.com/tronprotocol/tron-web/blob/master/src/utils/code.js\nconst ADDRESS_PREFIX = '41'\nfunction byte2hexStr(byte: number): string {\n  const hexByteMap = '0123456789ABCDEF'\n\n  let str = ''\n  str += hexByteMap.charAt(byte >> 4)\n  str += hexByteMap.charAt(byte & 0x0f)\n\n  return str\n}\n\nfunction hexStr2byteArray(str: string): number[] {\n  const byteArray = Array()\n  let d = 0\n  let j = 0\n  let k = 0\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i)\n\n    if (isHexChar(c)) {\n      d <<= 4\n      d += hexChar2byte(c)\n      j++\n\n      if (0 === j % 2) {\n        byteArray[k++] = d\n        d = 0\n      }\n    }\n  }\n\n  return byteArray\n}\n\nfunction isHexChar(c: string): boolean {\n  return (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f') || (c >= '0' && c <= '9')\n}\n\nfunction hexChar2byte(c: string): number {\n  let d = 0\n\n  if (c >= 'A' && c <= 'F') {\n    d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10\n  } else if (c >= 'a' && c <= 'f') {\n    d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10\n  } else if (c >= '0' && c <= '9') {\n    d = c.charCodeAt(0) - '0'.charCodeAt(0)\n  }\n\n  return d\n}\n\nfunction byteArray2hexStr(byteArray: number[]): string {\n  let str = ''\n\n  for (let i = 0; i < byteArray.length; i++) {\n    str += byte2hexStr(byteArray[i])\n  }\n  return str\n}\n\nfunction pubBytesToTronBytes(pubBytes: number[]): number[] {\n  if (pubBytes.length === 65) {\n    pubBytes = pubBytes.slice(1)\n  }\n\n  const hash = keccak256(pubBytes).toString()\n  const addressHex = ADDRESS_PREFIX + hash.substring(24)\n\n  return hexStr2byteArray(addressHex)\n}\n\nfunction addressBytesToB58CheckAddress(addressBytes: number[]) {\n  const hash0 = SHA256(addressBytes)\n  const hash1 = SHA256(hash0)\n  let checkSum = hash1.slice(0, 4)\n  checkSum = addressBytes.concat(checkSum)\n  return encode58(checkSum)\n}\n\nfunction SHA256(msgBytes: number[]): number[] {\n  const shaObj = new jsSHA('SHA-256', 'HEX')\n  const msgHex = byteArray2hexStr(msgBytes)\n  shaObj.update(msgHex)\n  const hashHex = shaObj.getHash('HEX')\n  return hexStr2byteArray(hashHex)\n}\n","import { HDPrivateKey } from 'bitcore-lib'\n\nimport { BaseTronPayments } from './BaseTronPayments'\nimport Bip44Cache from './Bip44Cache'\nimport { GetAddressOptions, HdTronPaymentsConfig } from './types'\nimport { deriveAddress, derivePrivateKey, xprvToXpub } from './bip44'\nimport { DEFAULT_MAX_ADDRESS_SCAN } from './constants'\nimport { isValidXpub, isValidXprv } from './utils'\n\nconst xpubCache = new Bip44Cache()\n\nexport class HdTronPayments extends BaseTronPayments<HdTronPaymentsConfig> {\n  readonly xprv: string | null\n  readonly xpub: string\n  maxAddressScan: number\n\n  constructor(private readonly config: HdTronPaymentsConfig) {\n    super(config)\n    this.maxAddressScan = config.maxAddressScan || DEFAULT_MAX_ADDRESS_SCAN\n    if (isValidXprv(config.hdKey)) {\n      this.xprv = config.hdKey\n      this.xpub = xprvToXpub(this.xprv)\n    } else if (isValidXpub(config.hdKey)) {\n      this.xprv = null\n      this.xpub = config.hdKey\n    } else {\n      throw new Error('Account must be a valid xprv or xpub')\n    }\n  }\n\n  static generateNewKeys() {\n    const key = new HDPrivateKey()\n    const xprv = key.toString()\n    const xpub = xprvToXpub(xprv)\n    return {\n      xprv,\n      xpub,\n    }\n  }\n\n  getXpub(): string {\n    return this.xpub\n  }\n\n  getFullConfig(): HdTronPaymentsConfig {\n    return this.config\n  }\n\n  getPublicConfig(): HdTronPaymentsConfig {\n    return {\n      ...this.config,\n      hdKey: this.getXpub(),\n    }\n  }\n\n  getAccountId(index: number): string {\n    return this.getXpub()\n  }\n\n  getAccountIds(): string[] {\n    return [this.getXpub()]\n  }\n\n  async getAddress(index: number, options: GetAddressOptions = {}): Promise<string> {\n    const cacheIndex = options.cacheIndex || true\n    // this.account is an xprv or xpub\n    const xpub = this.getXpub()\n    const address = deriveAddress(xpub, index)\n    if (!this.isValidAddress(address)) {\n      // This should never happen\n      throw new Error(`Cannot get address ${index} - validation failed for derived address`)\n    }\n    if (cacheIndex) {\n      xpubCache.put(xpub, index, address)\n    }\n    return address\n  }\n\n  async getAddressIndex(address: string): Promise<number> {\n    const xpub = this.getXpub()\n    const cachedIndex = xpubCache.lookupIndex(xpub, address)\n    if (cachedIndex) {\n      return cachedIndex\n    }\n    for (let i = 0; i < this.maxAddressScan; i++) {\n      if (address === deriveAddress(xpub, i)) {\n        xpubCache.put(xpub, i, address)\n        return i\n      }\n    }\n    throw new Error(\n      'Cannot get index of address after checking cache and scanning addresses' +\n        ` from 0 to ${this.maxAddressScan - 1} (address=${address})`,\n    )\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    if (!this.xprv) {\n      throw new Error(`Cannot get private key ${index} - HdTronPayments was created with an xpub`)\n    }\n    return derivePrivateKey(this.xprv, index)\n  }\n}\n\nexport default HdTronPayments\n","import { BaseTronPayments } from './BaseTronPayments'\nimport { KeyPairTronPaymentsConfig } from './types'\n\nexport class KeyPairTronPayments extends BaseTronPayments<KeyPairTronPaymentsConfig> {\n  readonly addresses: { [index: number]: string | undefined } = {}\n  readonly privateKeys: { [index: number]: string | null | undefined } = {}\n  readonly addressIndices: { [address: string]: number | undefined } = {}\n\n  constructor(private readonly config: KeyPairTronPaymentsConfig) {\n    super(config)\n    Object.entries(config.keyPairs).forEach(([iString, addressOrKey]) => {\n      if (typeof addressOrKey === 'undefined' || addressOrKey === null) {\n        return\n      }\n      const i = Number.parseInt(iString)\n      if (this.isValidAddress(addressOrKey)) {\n        this.addresses[i] = addressOrKey\n        this.privateKeys[i] = null\n        this.addressIndices[addressOrKey] = i\n        return\n      }\n      if (this.isValidPrivateKey(addressOrKey)) {\n        const address = this.privateKeyToAddress(addressOrKey)\n        this.addresses[i] = address\n        this.privateKeys[i] = addressOrKey\n        this.addressIndices[address] = i\n        return\n      }\n      throw new Error(`KeyPairTronPaymentsConfig.keyPairs[${i}] is not a valid private key or address`)\n    })\n  }\n\n  getFullConfig(): KeyPairTronPaymentsConfig {\n    return this.config\n  }\n\n  getPublicConfig(): KeyPairTronPaymentsConfig {\n    return {\n      ...this.config,\n      keyPairs: this.addresses,\n    }\n  }\n\n  getAccountId(index: number): string {\n    const accountId = this.addresses[index]\n    if (!accountId) {\n      throw new Error(`No KeyPairTronPayments account configured at index ${index}`)\n    }\n    return accountId\n  }\n\n  getAccountIds(): string[] {\n    return Object.keys(this.addressIndices)\n  }\n\n  async getAddress(index: number): Promise<string> {\n    const address = this.addresses[index]\n    if (typeof address === 'undefined') {\n      throw new Error(`Cannot get address ${index} - keyPair[${index}] is undefined`)\n    }\n    return address\n  }\n\n  async getAddressIndex(address: string): Promise<number> {\n    const index = this.addressIndices[address]\n    if (typeof index === 'undefined') {\n      throw new Error(`Cannot get index of address ${address}`)\n    }\n    return index\n  }\n\n  async getPrivateKey(index: number): Promise<string> {\n    const privateKey = this.privateKeys[index]\n    if (typeof privateKey === 'undefined') {\n      throw new Error(`Cannot get private key ${index} - keyPair[${index}] is undefined`)\n    }\n    if (privateKey === null) {\n      throw new Error(`Cannot get private key ${index} - keyPair[${index}] is a public address`)\n    }\n    return privateKey\n  }\n}\n\nexport default KeyPairTronPayments\n","import { PaymentsFactory } from '@faast/payments-common'\n\nimport { TronPaymentsConfig, HdTronPaymentsConfig, KeyPairTronPaymentsConfig } from './types'\nimport { HdTronPayments } from './HdTronPayments'\nimport { KeyPairTronPayments } from './KeyPairTronPayments'\n\nexport class TronPaymentsFactory implements PaymentsFactory<TronPaymentsConfig> {\n  forConfig(config: HdTronPaymentsConfig): HdTronPayments\n  forConfig(config: KeyPairTronPaymentsConfig): KeyPairTronPayments\n  forConfig(config: TronPaymentsConfig) {\n    if ((config as HdTronPaymentsConfig).hdKey) {\n      return new HdTronPayments(config as HdTronPaymentsConfig)\n    }\n    if ((config as KeyPairTronPaymentsConfig).keyPairs) {\n      return new KeyPairTronPayments(config as KeyPairTronPaymentsConfig)\n    }\n    throw new Error('Cannot instantiate tron payments for unsupported config')\n  }\n}\n\nexport default TronPaymentsFactory\n","import * as t from 'io-ts'\nimport { extendCodec } from '@faast/ts-common'\nimport {\n  BaseTransactionInfo,\n  BaseUnsignedTransaction,\n  BaseSignedTransaction,\n  BaseBroadcastResult,\n  CreateTransactionOptions,\n} from '@faast/payments-common'\nimport {\n  Transaction as TronWebTransaction,\n  TransactionInfo as TronWebTransactionInfo,\n  Block as TronWebBlock,\n} from 'tronweb'\n\nexport { TronWebTransaction, TronWebTransactionInfo, TronWebBlock, CreateTransactionOptions }\n\nexport type TransactionInfoRaw = TronWebTransaction &\n  TronWebTransactionInfo & {\n    currentBlock: Pick<TronWebBlock, 'blockID' | 'block_header'>\n  }\n\nexport const BaseTronPaymentsConfig = t.partial(\n  {\n    fullNode: t.string,\n    solidityNode: t.string,\n    eventServer: t.string,\n  },\n  'BaseTronPaymentsConfig',\n)\nexport type BaseTronPaymentsConfig = t.TypeOf<typeof BaseTronPaymentsConfig>\n\nexport const HdTronPaymentsConfig = extendCodec(\n  BaseTronPaymentsConfig,\n  {\n    // required\n    hdKey: t.string, // xprv or xpub\n  },\n  {\n    // optional\n    maxAddressScan: t.number, // max address scan to find address index in getAddressIndex\n  },\n  'HdTronPaymentsConfig',\n)\nexport type HdTronPaymentsConfig = t.TypeOf<typeof HdTronPaymentsConfig>\n\nconst NullableOptionalString = t.union([t.string, t.null, t.undefined])\n\nexport const KeyPairTronPaymentsConfig = extendCodec(\n  BaseTronPaymentsConfig,\n  {\n    // can be private keys or addresses\n    keyPairs: t.union([t.array(NullableOptionalString), t.record(t.number, NullableOptionalString)]),\n  },\n  {},\n  'KeyPairTronPaymentsConfig',\n)\nexport type KeyPairTronPaymentsConfig = t.TypeOf<typeof KeyPairTronPaymentsConfig>\n\nexport const TronPaymentsConfig = t.union([HdTronPaymentsConfig, KeyPairTronPaymentsConfig])\nexport type TronPaymentsConfig = t.TypeOf<typeof TronPaymentsConfig>\n\nexport const TronUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n  },\n  {},\n  'TronUnsignedTransaction',\n)\nexport type TronUnsignedTransaction = t.TypeOf<typeof TronUnsignedTransaction>\n\nexport const TronSignedTransaction = extendCodec(BaseSignedTransaction, {}, {}, 'TronSignedTransaction')\nexport type TronSignedTransaction = t.TypeOf<typeof TronSignedTransaction>\n\nexport const TronTransactionInfo = extendCodec(BaseTransactionInfo, {}, {}, 'TronTransactionInfo')\nexport type TronTransactionInfo = t.TypeOf<typeof TronTransactionInfo>\n\nexport const TronBroadcastResult = extendCodec(\n  BaseBroadcastResult,\n  {\n    rebroadcast: t.boolean,\n  },\n  {},\n  'TronBroadcastResult',\n)\nexport type TronBroadcastResult = t.TypeOf<typeof TronBroadcastResult>\n\nexport const GetAddressOptions = t.partial({\n  cacheIndex: t.boolean,\n})\nexport type GetAddressOptions = t.TypeOf<typeof GetAddressOptions>\n"],"names":["FeeLevel","isType","FeeOptionCustom","FeeRateType","cloneDeep","get","TransactionStatus","pick","set","EC","HDPublicKey","HDPrivateKey","keccak256","t.partial","t.string","extendCodec","t.number","t.union","t.null","t.undefined","t.array","t.record","BaseUnsignedTransaction","BaseSignedTransaction","BaseTransactionInfo","BaseBroadcastResult","t.boolean"],"mappings":"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"}